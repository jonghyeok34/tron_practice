{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"@babel/runtime/regenerator\"","webpack:///external \"@babel/runtime/helpers/asyncToGenerator\"","webpack:///external \"@babel/runtime/helpers/classCallCheck\"","webpack:///external \"@babel/runtime/helpers/createClass\"","webpack:///external \"@babel/runtime/helpers/defineProperty\"","webpack:///external \"injectpromise\"","webpack:///external \"@babel/runtime/helpers/toConsumableArray\"","webpack:///external \"@babel/runtime/helpers/slicedToArray\"","webpack:///external \"@babel/runtime/helpers/typeof\"","webpack:///external \"bignumber.js\"","webpack:///external \"ethers\"","webpack:///external \"@babel/runtime/helpers/assertThisInitialized\"","webpack:///external \"semver\"","webpack:///external \"elliptic\"","webpack:///external \"@babel/runtime/helpers/possibleConstructorReturn\"","webpack:///external \"@babel/runtime/helpers/getPrototypeOf\"","webpack:///external \"@babel/runtime/helpers/inherits\"","webpack:///external \"axios\"","webpack:///external \"validator\"","webpack:///external \"eventemitter3\"","webpack:///external \"querystring\"","webpack:///./src/utils/base64.js","webpack:///./src/utils/bytes.js","webpack:///./src/utils/address.js","webpack:///./src/utils/code.js","webpack:///./src/utils/base58.js","webpack:///./src/utils/ethersUtils.js","webpack:///./src/utils/crypto.js","webpack:///./src/utils/accounts.js","webpack:///./src/utils/abi.js","webpack:///./src/utils/index.js","webpack:///./src/lib/transactionBuilder.js","webpack:///./src/lib/providers/index.js","webpack:///./src/lib/providers/HttpProvider.js","webpack:///./src/paramValidator/index.js","webpack:///./src/lib/trx.js","webpack:///./src/lib/contract/method.js","webpack:///./src/lib/contract/index.js","webpack:///./src/lib/plugin.js","webpack:///./src/lib/event.js","webpack:///./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","Base64","_this","this","_keyStr","encode","input","chr1","chr2","chr3","enc1","enc2","enc3","enc4","output","length","charCodeAt","isNaN","charAt","encodeIgnoreUtf8","inputBytes","decode","replace","indexOf","String","fromCharCode","_utf8_decode","decodeToByteArray","_out2ByteArray","utftext","byteArray","Array","_utf8_encode","string","c2","c3","byte2hexStr","byte","Error","str","bytesToString","arr","one","toString","v","match","bytesLength","store","slice","st","parseInt","hextoString","hex","split","out","tmp","concat","byteArray2hexStr","base64DecodeFromString","string64","base64EncodeToString","bytes","ADDRESS_SIZE","ADDRESS_PREFIX","ADDRESS_PREFIX_BYTE","ADDRESS_PREFIX_REGEX","bin2String","array","arrayEquals","array1","array2","strict","JSON","stringify","stringToBytes","len","push","hexChar2byte","isHexChar","hexStr2byteArray","j","k","strToDate","test","tempStrs","dateStrs","year","month","day","timeStrs","hour","minute","second","Date","isNumber","getStringType","ALPHABET","ALPHABET_MAP","BASE","encode58","buffer","digits","carry","reverse","map","digit","join","decode58","keccak256","utils","sha256","toUtf8Bytes","recoverAddress","SigningKey","AbiCoder","getBase58CheckAddress","addressBytes","hash0","SHA256","checkSum","decodeBase58Address","base58Sting","address","offset","checkSum1","signTransaction","priKeyBytes","transaction","signature","ECKeySign","txID","isArray","includes","arrayToBase64String","a","btoa","apply","toConsumableArray_default","signBytes","privateKey","contents","getRowBytesFromTransactionBase64","base64Data","bytesDecode","proto","protocol","Transaction","deserializeBinary","getRawData","serializeBinary","genPriKey","priKeyHex","EC","genKeyPair","getPrivate","computeAddress","pubBytes","hash","substring","getAddressFromPriKey","getPubKeyFromPriKey","decode58Check","addressStr","decodeCheck","decodeData","hash1","isAddressValid","base58Str","getBase58CheckAddressFromPriKeyBase64String","priKeyBase64String","getHexStrAddressFromPriKeyBase64String","getAddressFromPriKeyBase64String","pubkey","keyFromPrivate","getPublic","x","y","xHex","yHex","hashBytes","sign","id","recoveryParam","rHex","sHex","msgBytes","msgHex","passwordToAddress","password","pkToAddress","generateAccount","pubKeyBytes","publicKey","base58","abiCoder","decodeParams","names","types","ignoreMethodHash","type","reduce","obj","arg","index","substr","toLowerCase","encodeParams","values","TronWeb","toHex","_sleep","self","src_utils","isValidURL","url","validator","isURL","protocols","require_tld","isObject","isJson","parse","ex","isBoolean","bool","isBigNumber","number","BigNumber","constructor","isString","isFunction","isHex","isInteger","Number","hasProperty","hasProperties","_len","arguments","properties","_key","mapEvent","event","data","block","block_number","timestamp","block_timestamp","contract","contract_address","event_name","transaction_id","result","resourceNode","resource_Node","_unconfirmed","unconfirmed","_fingerprint","fingerprint","parseEvent","_ref","abi","inputs","_abi$index","padLeft","padding","amount","res","isNotNullOrUndefined","val","sleep","asyncToGenerator_default","regenerator_default","mark","_callee","millis","_args","wrap","_context","prev","next","undefined","abrupt","Promise","resolve","setTimeout","stop","code","accounts","crypto","ethersUtils","providers","HttpProvider","host","timeout","user","headers","statusPage","classCallCheck_default","instance","axios","baseURL","auth","request","then","payload","method","keys","params","Validator","tronWeb","param","msg","callback","Function","normalized","no","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","iterator","done","gt","lt","gte","lte","optional","se","isAddress","notPositive","notEqual","invalid","err","fromUtf8","resultManager","message","toUtf8","TransactionBuilder","injectPromise","injectpromise","to","from","defaultAddress","options","sendTrx","notValid","to_address","owner_address","permissionId","Permission_id","fullNode","tokenID","sendToken","asset_name","issuerAddress","buyer","purchaseToken","duration","resource","receiverAddress","freezeBalance","frozen_balance","frozen_duration","receiver_address","unfreezeBalance","withdrawBlockRewards","console","log","applyForSR","votes","voterAddress","vote","entries","_ref2","slicedToArray_default","srAddress","voteCount","vote_address","vote_count","createSmartContract","feeLimit","userFeePercentage","originEnergyLimit","callValue","tokenValue","tokenId","token_id","_options$abi","_options$bytecode","bytecode","_options$parameters","parameters","_options$name","_unused","entrys","payable","some","func","constructorParams","find","it","args","fee_limit","call_value","consume_user_resource_percent","origin_energy_limit","parameter","call_token_value","typeof_default","splice","_triggerSmartContract","_len2","_key2","_isConstant","triggerSmartContract","_len3","_key3","confirmed","contractAddress","functionSelector","_Object$assign","assign","_parameters$i","function_selector","ownerAddress","clearABI","trx","cache","contracts","brokerage","updateBrokerage","createToken","_options$name2","_options$abbreviation","abbreviation","_options$description","description","_options$url","_options$totalSupply","totalSupply","_options$trxRatio","trxRatio","_options$tokenRatio","tokenRatio","_options$saleStart","saleStart","now","_options$saleEnd","saleEnd","_options$freeBandwidt","freeBandwidth","_options$freeBandwidt2","freeBandwidthLimit","_options$frozenAmount","frozenAmount","_options$frozenDurati","frozenDuration","voteScore","precision","abbr","total_supply","trx_num","num","start_time","end_time","free_asset_net_limit","public_free_asset_net_limit","frozen_supply","frozen_amount","frozen_days","fullnodeSatisfies","vote_score","accountName","updateAccount","account_name","accountId","setAccountId","startsWith","account_id","updateToken","_options","_options$description2","_options$url2","_options$freeBandwidt3","_options$freeBandwidt4","new_limit","new_public_limit","createProposal","proposalID","deleteProposal","proposal_id","isApproval","voteProposal","is_add_approval","tokenName","tokenBalance","trxBalance","createTRXExchange","first_token_id","first_token_balance","second_token_id","second_token_balance","resources","firstTokenName","firstTokenBalance","secondTokenName","secondTokenBalance","createTokenExchange","exchangeID","tokenAmount","injectExchangeTokens","exchange_id","quant","withdrawExchangeTokens","tokenAmountSold","tokenAmountExpected","tradeExchangeTokens","fromAscii","expected","updateSetting","updateEnergyLimit","permissions","permission_name","threshold","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","weight","operations","ownerPermissions","witnessPermissions","activesPermissions","updateAccountPermissions","checkPermissions","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","activesPermission","owner","witness","actives","newTxID","newTransaction","visible","alterTransaction","dataFormat","raw_data","extension","expiration","extendExpiration","addUpdateData","ETH_MESSAGE_HEADER","Trx","token","trx_objectSpread","getCurrentBlock","getConfirmedCurrentBlock","solidityNode","defaultBlock","getBlockByHash","getBlockByNumber","getBlock","blockHash","blockID","getBlockTransactionCount","_ref$transactions","transactions","getTransactionFromBlock","_ref2$transactions","transactionID","getTransaction","getConfirmedTransaction","_getTransactionInfoById","limit","getTransactionsRelated","getTransactionsToAddress","getTransactionsFromAddress","direction","all","tx","sort","b","t0","account","_ref5","getAccount","getAccountById","getAccountInfoById","getBalance","_ref6","_ref6$balance","balance","getUnconfirmedAccount","getUnconfirmedAccountById","getUnconfirmedBalance","_ref7","_ref7$balance","_ref8","_ref8$freeNetUsed","freeNetUsed","_ref8$freeNetLimit","freeNetLimit","_ref8$NetUsed","NetUsed","_ref8$NetLimit","NetLimit","getBandwidth","_ref9","_ref9$assetIssue","assetIssue","tokens","_parseToken","getTokensIssuedByAddress","_this2","getTokenFromID","_this3","listNodes","_ref10","_ref10$nodes","nodes","_ref11","_ref11$address","port","start","end","startNum","endNum","_ref12","_ref12$block","getBlockRange","listSuperRepresentatives","_ref13","_ref13$witnesses","witnesses","_this4","_ref15","_ref15$assetIssue","_ref14","_ref14$assetIssue","listTokens","timeUntilNextVoteCycle","_ref16","_ref16$num","Math","floor","_this5","getContract","useTronHeader","verifyMessage","verifySignature","defaultPrivateKey","multisig","signatureHex","signString","_context3","fromPrivateKey","t1","multiSign","getSignWeight","signWeight","foundKey","permission","approved_list","_context4","getApprovedList","signedTransaction","sendRawTransaction","sendTransaction","transactionBuilder","_context7","_context8","_context9","_context10","_context11","proposal","getProposal","listProposals","_ref17","_ref17$proposals","proposals","getChainParameters","_ref18","_ref18$chainParameter","chainParameter","getAccountResources","exchange","getExchangeByID","listExchanges","_ref19","_ref19$exchanges","exchanges","listExchangesPaginated","_ref20","_ref20$exchanges","getNodeInfo","info","_this6","getTokenListByName","_this7","getTokenByID","_getReward","_getBrokerage","reward","messageBytes","messageDigest","recovered","tronAddress","base58Address","fromHex","signingKey","signDigest","getFunctionSelector","getParamTypes","decodeOutput","filter","_ref3","Method","outputs","sha3","defaultOptions","shouldPollResponse","forEach","methodArgs","_call","send","_send","watch","_watch","deployed","stateMutability","method_objectSpread","constant_result","msg2","chunk","broadcast","error","checkResult","_callee2","decoded","_args2","_context2","getTransactionInfo","sent","resMessage","rawResponse","contractResult","keepTxID","eventServer","listener","lastBlock","since","getEvents","_callee4","events","_events$sort","_events$sort2","latestEvent","newEvents","eventName","blockNumber","filters","onlyUnconfirmed","onlyConfirmed","getEventsByContractAddress","priorEvent","reject","bindListener","clearInterval","setInterval","Contract","eventListener","methods","methodInstances","props","loadAbi","eventCallback","_getEvents","__proto__","prop","methodCall","onMethod","methodName","inputData","decodeInput","at","startCallback","_startEventListener","_stopEventListener","Plugin","pluginNoOverride","disablePlugins","pluginInterface","requires","components","libs","plugged","skipped","plugin","semver","satisfies","version","fullClass","className","classInstanceName","component","Event","healthcheck","isValidProvider","isConnected","sinceTimestamp","size","page","fromTimestamp","previousLastEventFingerprint","previousFingerprint","routeParams","warn","qs","querystring","response","getEventsByTransactionID","DEFAULT_VERSION","possibleConstructorReturn_default","getPrototypeOf_default","fullHost","assertThisInitialized_default","setFullNode","setSolidityNode","setEventServer","setPrivateKey","fullnodeVersion","nodeInfo","configNodeInfo","codeVersion","abs","setAddress","emit","provider","knownProvider","setStatusPage","getFullnodeVersion","_this$event","setServer","currentProviders","_this$event2","_this$event3","prefix","Buffer","fromDecimal","isFinite","padEnd","toBigNumber","toNumber","isLessThan","sun","div","times","_unused2","EventEmitter"],"mappings":"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","file":"TronWeb.node.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 22);\n","module.exports = require(\"@babel/runtime/regenerator\");","module.exports = require(\"@babel/runtime/helpers/asyncToGenerator\");","module.exports = require(\"@babel/runtime/helpers/classCallCheck\");","module.exports = require(\"@babel/runtime/helpers/createClass\");","module.exports = require(\"@babel/runtime/helpers/defineProperty\");","module.exports = require(\"injectpromise\");","module.exports = require(\"@babel/runtime/helpers/toConsumableArray\");","module.exports = require(\"@babel/runtime/helpers/slicedToArray\");","module.exports = require(\"@babel/runtime/helpers/typeof\");","module.exports = require(\"bignumber.js\");","module.exports = require(\"ethers\");","module.exports = require(\"@babel/runtime/helpers/assertThisInitialized\");","module.exports = require(\"semver\");","module.exports = require(\"elliptic\");","module.exports = require(\"@babel/runtime/helpers/possibleConstructorReturn\");","module.exports = require(\"@babel/runtime/helpers/getPrototypeOf\");","module.exports = require(\"@babel/runtime/helpers/inherits\");","module.exports = require(\"axios\");","module.exports = require(\"validator\");","module.exports = require(\"eventemitter3\");","module.exports = require(\"querystring\");","export function Base64() {\n    this._keyStr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\n    this.encode = input => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n\n        while (i < input.length) {\n            chr1 = input.charCodeAt(i++);\n            chr2 = input.charCodeAt(i++);\n            chr3 = input.charCodeAt(i++);\n\n            enc1 = chr1 >> 2;\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n            enc4 = chr3 & 63;\n\n            if (isNaN(chr2))\n                enc3 = enc4 = 64;\n            else if (isNaN(chr3))\n                enc4 = 64;\n\n            output = output +\n                this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +\n                this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);\n        }\n\n        return output;\n    }\n\n    this.encodeIgnoreUtf8 = inputBytes => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n\n        while (i < inputBytes.length) {\n            chr1 = inputBytes[i++];\n            chr2 = inputBytes[i++];\n            chr3 = inputBytes[i++];\n\n            enc1 = chr1 >> 2;\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n            enc4 = chr3 & 63;\n\n            if (isNaN(chr2))\n                enc3 = enc4 = 64;\n            else if (isNaN(chr3))\n                enc4 = 64;\n\n            output = output +\n                this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +\n                this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);\n        }\n\n        return output;\n    }\n\n    this.decode = input => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n        while (i < input.length) {\n            enc1 = this._keyStr.indexOf(input.charAt(i++));\n            enc2 = this._keyStr.indexOf(input.charAt(i++));\n            enc3 = this._keyStr.indexOf(input.charAt(i++));\n            enc4 = this._keyStr.indexOf(input.charAt(i++));\n\n            chr1 = (enc1 << 2) | (enc2 >> 4);\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n            chr3 = ((enc3 & 3) << 6) | enc4;\n\n            output = output + String.fromCharCode(chr1);\n\n            if (enc3 != 64)\n                output = output + String.fromCharCode(chr2);\n\n            if (enc4 != 64)\n                output = output + String.fromCharCode(chr3);\n        }\n\n        return this._utf8_decode(output);\n    }\n\n    this.decodeToByteArray = input => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n        while (i < input.length) {\n            enc1 = this._keyStr.indexOf(input.charAt(i++));\n            enc2 = this._keyStr.indexOf(input.charAt(i++));\n            enc3 = this._keyStr.indexOf(input.charAt(i++));\n            enc4 = this._keyStr.indexOf(input.charAt(i++));\n\n            chr1 = (enc1 << 2) | (enc2 >> 4);\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n            chr3 = ((enc3 & 3) << 6) | enc4;\n\n            output = output + String.fromCharCode(chr1);\n\n            if (enc3 != 64)\n                output = output + String.fromCharCode(chr2);\n\n            if (enc4 != 64)\n                output = output + String.fromCharCode(chr3);\n        }\n\n        return this._out2ByteArray(output);\n    }\n\n    this._out2ByteArray = utftext => {\n        const byteArray = new Array(utftext.length);\n\n        let i = 0;\n        let c = 0;\n\n        while (i < utftext.length) {\n            c = utftext.charCodeAt(i);\n            byteArray[i] = c;\n            i++;\n        }\n\n        return byteArray;\n    }\n\n    this._utf8_encode = string => {\n        string = string.replace(/\\r\\n/g, \"\\n\");\n        let utftext = \"\";\n\n        for (let n = 0; n < string.length; n++) {\n            const c = string.charCodeAt(n);\n\n            if (c < 128) {\n                utftext += String.fromCharCode(c);\n            } else if ((c > 127) && (c < 2048)) {\n                utftext += String.fromCharCode((c >> 6) | 192);\n                utftext += String.fromCharCode((c & 63) | 128);\n            } else {\n                utftext += String.fromCharCode((c >> 12) | 224);\n                utftext += String.fromCharCode(((c >> 6) & 63) | 128);\n                utftext += String.fromCharCode((c & 63) | 128);\n            }\n        }\n\n        return utftext;\n    }\n\n    this._utf8_decode = utftext => {\n        let string = \"\";\n        let i = 0;\n        let c = 0;\n        let c2 = 0;\n        let c3 = 0;\n\n        while (i < utftext.length) {\n            c = utftext.charCodeAt(i);\n\n            if (c < 128) {\n                string += String.fromCharCode(c);\n                i++;\n            } else if ((c > 191) && (c < 224)) {\n                c2 = utftext.charCodeAt(i + 1);\n                string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));\n                i += 2;\n            } else {\n                c2 = utftext.charCodeAt(i + 1);\n                c3 = utftext.charCodeAt(i + 2);\n\n                string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\n\n                i += 3;\n            }\n        }\n\n        return string;\n    }\n}\n","import {Base64} from './base64';\n\nexport function byte2hexStr(byte) {\n    if (typeof byte !== 'number')\n        throw new Error('Input must be a number');\n\n    if (byte < 0 || byte > 255)\n        throw new Error('Input must be a byte');\n\n    const hexByteMap = '0123456789ABCDEF';\n\n    let str = '';\n    str += hexByteMap.charAt(byte >> 4);\n    str += hexByteMap.charAt(byte & 0x0f);\n\n    return str;\n}\n\nexport function bytesToString(arr) {\n    if (typeof arr === 'string')\n        return arr;\n\n    let str = '';\n\n    for (let i = 0; i < arr.length; i++) {\n        const one = arr[i].toString(2);\n        const v = one.match(/^1+?(?=0)/);\n\n        if (v && one.length === 8) {\n            const bytesLength = v[0].length;\n            let store = arr[i].toString(2).slice(7 - bytesLength);\n\n            for (let st = 1; st < bytesLength; st++)\n                store += arr[st + i].toString(2).slice(2);\n\n            str += String.fromCharCode(parseInt(store, 2));\n            i += bytesLength - 1;\n        } else {\n            str += String.fromCharCode(arr[i]);\n        }\n    }\n\n    return str;\n}\n\nexport function hextoString(hex) {\n    const arr = hex.replace(/^0x/, '').split('');\n    let out = '';\n\n    for (let i = 0; i < arr.length / 2; i++) {\n        let tmp = `0x${arr[i * 2]}${arr[i * 2 + 1]}`;\n        out += String.fromCharCode(tmp);\n    }\n\n    return out;\n}\n\nexport function byteArray2hexStr(byteArray) {\n    let str = '';\n\n    for (let i = 0; i < (byteArray.length); i++)\n        str += byte2hexStr(byteArray[i]);\n\n    return str;\n}\n\nexport function base64DecodeFromString(string64) {\n    return new Base64().decodeToByteArray(string64);\n}\n\nexport function base64EncodeToString(bytes) {\n    const b = new Base64();\n    const string64 = b.encodeIgnoreUtf8(bytes);\n\n    return string64\n}\n\n","export const ADDRESS_SIZE = 34;\nexport const ADDRESS_PREFIX = \"41\";\nexport const ADDRESS_PREFIX_BYTE = 0x41;\nexport const ADDRESS_PREFIX_REGEX = /^(41)/;\n","import {\n    byte2hexStr,\n    bytesToString,\n    hextoString,\n    byteArray2hexStr,\n    base64DecodeFromString,\n    base64EncodeToString\n} from './bytes';\n\nexport function bin2String(array) {\n    // TODO Do we need this alias?\n    return bytesToString(array);\n}\n\nexport function arrayEquals(array1, array2, strict) {\n    if (array1.length != array2.length)\n        return false;\n\n    let i;\n\n    for (i = 0; i < array1.length; i++) {\n        if (strict) {\n            if (array1[i] != array2[i])\n                return false;\n        } else if (JSON.stringify(array1[i]) != JSON.stringify(array2[i]))\n            return false;\n    }\n\n    return true;\n}\n\nexport function stringToBytes(str) {\n\n    if (typeof str !== 'string')\n        throw new Error('The passed string is not a string')\n\n    const bytes = new Array();\n    let len;\n    let c;\n\n    len = str.length;\n\n    for (let i = 0; i < len; i++) {\n        c = str.charCodeAt(i);\n\n        if (c >= 0x010000 && c <= 0x10FFFF) {\n            bytes.push(((c >> 18) & 0x07) | 0xF0);\n            bytes.push(((c >> 12) & 0x3F) | 0x80);\n            bytes.push(((c >> 6) & 0x3F) | 0x80);\n            bytes.push((c & 0x3F) | 0x80);\n        } else if (c >= 0x000800 && c <= 0x00FFFF) {\n            bytes.push(((c >> 12) & 0x0F) | 0xE0);\n            bytes.push(((c >> 6) & 0x3F) | 0x80);\n            bytes.push((c & 0x3F) | 0x80);\n        } else if (c >= 0x000080 && c <= 0x0007FF) {\n            bytes.push(((c >> 6) & 0x1F) | 0xC0);\n            bytes.push((c & 0x3F) | 0x80);\n        } else bytes.push(c & 0xFF);\n    }\n\n    return bytes;\n}\n\nexport {byte2hexStr, bytesToString, hextoString, byteArray2hexStr, base64DecodeFromString, base64EncodeToString}\n\nexport function hexChar2byte(c) {\n    let d;\n\n    if (c >= 'A' && c <= 'F')\n        d = c.charCodeAt(0) - 'A'.charCodeAt(0) + 10;\n    else if (c >= 'a' && c <= 'f')\n        d = c.charCodeAt(0) - 'a'.charCodeAt(0) + 10;\n    else if (c >= '0' && c <= '9')\n        d = c.charCodeAt(0) - '0'.charCodeAt(0);\n\n    if (typeof d === 'number')\n        return d;\n    else\n        throw new Error('The passed hex char is not a valid hex char');\n}\n\nexport function isHexChar(c) {\n    if ((c >= 'A' && c <= 'F') ||\n        (c >= 'a' && c <= 'f') ||\n        (c >= '0' && c <= '9')) {\n        return 1;\n    }\n\n    return 0;\n}\n\nexport function hexStr2byteArray(str) {\n    if (typeof str !== 'string')\n        throw new Error('The passed string is not a string')\n\n    const byteArray = Array();\n    let d = 0;\n    let j = 0;\n    let k = 0;\n\n    for (let i = 0; i < str.length; i++) {\n        const c = str.charAt(i);\n\n        if (isHexChar(c)) {\n            d <<= 4;\n            d += hexChar2byte(c);\n            j++;\n\n            if (0 === (j % 2)) {\n                byteArray[k++] = d;\n                d = 0;\n            }\n        } else\n            throw new Error('The passed hex char is not a valid hex string')\n    }\n\n    return byteArray;\n}\n\n//yyyy-MM-DD HH-mm-ss\nexport function strToDate(str) {\n\n    if (!/^\\d{4}-\\d{2}-\\d{2}( \\d{2}-\\d{2}-\\d{2}|)/.test(str))\n        throw new Error('The passed date string is not valid')\n\n    const tempStrs = str.split(\" \");\n    const dateStrs = tempStrs[0].split(\"-\");\n    const year = parseInt(dateStrs[0], 10);\n    const month = parseInt(dateStrs[1], 10) - 1;\n    const day = parseInt(dateStrs[2], 10);\n\n    if (tempStrs.length > 1) {\n        const timeStrs = tempStrs[1].split(\"-\");\n        const hour = parseInt(timeStrs[0], 10);\n        const minute = parseInt(timeStrs[1], 10);\n        const second = parseInt(timeStrs[2], 10);\n\n        return new Date(year, month, day, hour, minute, second);\n    }\n\n    return new Date(year, month, day);\n}\n\nexport function isNumber(c) {\n    if (c >= '0' && c <= '9')\n        return 1;\n\n    return 0;\n}\n\n//return 1: address  --- 20Bytes HexString\n//return 2: blockNumber ------ Decimal number\n//return 3: assetName ------ String\n//return other: error\nexport function getStringType(str) {\n    if (null == str)\n        return -1;\n\n    if (typeof (str) != 'string')\n        return -1;\n\n    if (str.length == 0 || str == \"\")\n        return -1;\n\n    let i = 0;\n\n    // TODO Should we return 1 if someone passes a full, 42-chars long address?\n    // if (str.length == 42 && /^41/.test(str)) {\n    //     for (; i < 40; i++) {\n    //         var c = str.charAt(i+2);\n    //\n    //         if (!isHexChar(c))\n    //             break;\n    //     }\n    // } else\n    if (str.length == 40) {\n        for (; i < 40; i++) {\n            var c = str.charAt(i);\n\n            if (!isHexChar(c))\n                break;\n        }\n    }\n\n    if (i == 40)\n        return 1; //40 Hex, Address\n\n    for (i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n\n        if (!isNumber(c))\n            break;\n    }\n\n    if (i == str.length)\n        return 2; // All Decimal number, BlockNumber\n\n    for (i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n\n        if (c > ' ')\n            return 3; // At least one visible character\n    }\n\n    return -1;\n}\n","const ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\nconst ALPHABET_MAP = {};\n\nfor (let i = 0; i < ALPHABET.length; i++)\n    ALPHABET_MAP[ALPHABET.charAt(i)] = i;\n\nconst BASE = 58;\n\nexport function encode58(buffer) {\n    if (buffer.length === 0)\n        return '';\n\n    let i;\n    let j;\n\n    const digits = [0];\n\n    for (i = 0; i < buffer.length; i++) {\n        for (j = 0; j < digits.length; j++)\n            digits[j] <<= 8;\n\n        digits[0] += buffer[i];\n        let carry = 0;\n\n        for (j = 0; j < digits.length; ++j) {\n            digits[j] += carry;\n            carry = (digits[j] / BASE) | 0;\n            digits[j] %= BASE\n        }\n\n        while (carry) {\n            digits.push(carry % BASE);\n            carry = (carry / BASE) | 0\n        }\n    }\n\n    for (i = 0; buffer[i] === 0 && i < buffer.length - 1; i++)\n        digits.push(0);\n\n    return digits.reverse().map(digit => ALPHABET[digit]).join('');\n}\n\nexport function decode58(string) {\n    if (string.length === 0)\n        return [];\n\n    let i;\n    let j;\n\n    const bytes = [0];\n\n    for (i = 0; i < string.length; i++) {\n        const c = string[i];\n\n        if (!(c in ALPHABET_MAP))\n            throw new Error('Non-base58 character');\n\n        for (j = 0; j < bytes.length; j++)\n            bytes[j] *= BASE;\n\n        bytes[0] += ALPHABET_MAP[c];\n        let carry = 0;\n\n        for (j = 0; j < bytes.length; ++j) {\n            bytes[j] += carry;\n            carry = bytes[j] >> 8;\n            bytes[j] &= 0xff;\n        }\n\n        while (carry) {\n            bytes.push(carry & 0xff);\n            carry >>= 8;\n        }\n    }\n\n    for (i = 0; string[i] === '1' && i < string.length - 1; i++)\n        bytes.push(0);\n\n    return bytes.reverse();\n}\n","\nimport {utils} from 'ethers';\n\nconst keccak256 = utils.keccak256;\nconst sha256 = utils.sha256;\nconst toUtf8Bytes = utils.toUtf8Bytes;\nconst recoverAddress = utils.recoverAddress;\nconst SigningKey = utils.SigningKey;\nconst AbiCoder = utils.AbiCoder;\n\nexport {\n    keccak256,\n    sha256,\n    toUtf8Bytes,\n    recoverAddress,\n    SigningKey,\n    AbiCoder\n}\n","import {ADDRESS_PREFIX, ADDRESS_PREFIX_BYTE, ADDRESS_SIZE} from './address';\nimport {base64EncodeToString} from './code';\nimport {base64DecodeFromString, hexStr2byteArray} from './code';\nimport {encode58, decode58} from './base58';\nimport {byte2hexStr, byteArray2hexStr} from './bytes';\nimport {ec as EC} from 'elliptic';\nimport {keccak256, sha256} from './ethersUtils';\n\nexport function getBase58CheckAddress(addressBytes) {\n    const hash0 = SHA256(addressBytes);\n    const hash1 = SHA256(hash0);\n\n    let checkSum = hash1.slice(0, 4);\n    checkSum = addressBytes.concat(checkSum);\n\n    return encode58(checkSum);\n}\n\nexport function decodeBase58Address(base58Sting) {\n    if (typeof (base58Sting) != 'string')\n        return false;\n\n    if (base58Sting.length <= 4)\n        return false;\n\n    let address = decode58(base58Sting);\n\n    if (base58Sting.length <= 4)\n        return false;\n\n    const len = address.length;\n    const offset = len - 4;\n    const checkSum = address.slice(offset);\n\n    address = address.slice(0, offset);\n\n    const hash0 = SHA256(address);\n    const hash1 = SHA256(hash0);\n    const checkSum1 = hash1.slice(0, 4);\n\n    if (checkSum[0] == checkSum1[0] && checkSum[1] == checkSum1[1] && checkSum[2] ==\n        checkSum1[2] && checkSum[3] == checkSum1[3]\n    ) {\n        return address;\n    }\n\n    throw new Error('Invalid address provided');\n}\n\nexport function signTransaction(priKeyBytes, transaction) {\n    if (typeof priKeyBytes === 'string')\n        priKeyBytes = hexStr2byteArray(priKeyBytes);\n\n    const txID = transaction.txID;\n    const signature = ECKeySign(hexStr2byteArray(txID), priKeyBytes);\n\n    if (Array.isArray(transaction.signature)) {\n        if (!transaction.signature.includes(signature))\n            transaction.signature.push(signature);\n    } else\n        transaction.signature = [signature];\n    return transaction;\n}\n\nexport function arrayToBase64String(a) {\n    return btoa(String.fromCharCode(...a));\n}\n\nexport function signBytes(privateKey, contents) {\n    if (typeof privateKey === 'string')\n        privateKey = hexStr2byteArray(privateKey);\n\n    const hashBytes = SHA256(contents);\n    const signBytes = ECKeySign(hashBytes, privateKey);\n\n    return signBytes;\n}\n\nexport function getRowBytesFromTransactionBase64(base64Data) {\n    const bytesDecode = base64DecodeFromString(base64Data);\n    const transaction = proto.protocol.Transaction.deserializeBinary(bytesDecode);\n    const raw = transaction.getRawData();\n\n    return raw.serializeBinary();\n}\n\nexport function genPriKey() {\n    const ec = new EC('secp256k1');\n    const key = ec.genKeyPair();\n    const priKey = key.getPrivate();\n\n    let priKeyHex = priKey.toString('hex');\n\n    while (priKeyHex.length < 64) {\n        priKeyHex = `0${priKeyHex}`;\n    }\n\n    return hexStr2byteArray(priKeyHex);\n}\n\nexport function computeAddress(pubBytes) {\n    if (pubBytes.length === 65)\n        pubBytes = pubBytes.slice(1);\n\n    const hash = keccak256(pubBytes).toString().substring(2);\n    const addressHex = ADDRESS_PREFIX + hash.substring(24);\n\n    return hexStr2byteArray(addressHex);\n}\n\nexport function getAddressFromPriKey(priKeyBytes) {\n    let pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    return computeAddress(pubBytes);\n}\n\nexport function decode58Check(addressStr) {\n    const decodeCheck = decode58(addressStr);\n\n    if (decodeCheck.length <= 4)\n        return false;\n\n    const decodeData = decodeCheck.slice(0, decodeCheck.length - 4);\n    const hash0 = SHA256(decodeData);\n    const hash1 = SHA256(hash0);\n\n    if (hash1[0] === decodeCheck[decodeData.length] &&\n        hash1[1] === decodeCheck[decodeData.length + 1] &&\n        hash1[2] === decodeCheck[decodeData.length + 2] &&\n        hash1[3] === decodeCheck[decodeData.length + 3]) {\n        return decodeData;\n    }\n\n    return false;\n}\n\nexport function isAddressValid(base58Str) {\n    if (typeof (base58Str) !== 'string')\n        return false;\n\n    if (base58Str.length !== ADDRESS_SIZE)\n        return false;\n\n    let address = decode58(base58Str);\n\n    if (address.length !== 25)\n        return false;\n\n    if (address[0] !== ADDRESS_PREFIX_BYTE)\n        return false;\n\n    const checkSum = address.slice(21);\n    address = address.slice(0, 21);\n\n    const hash0 = SHA256(address);\n    const hash1 = SHA256(hash0);\n    const checkSum1 = hash1.slice(0, 4);\n\n    if (checkSum[0] == checkSum1[0] && checkSum[1] == checkSum1[1] && checkSum[2] ==\n        checkSum1[2] && checkSum[3] == checkSum1[3]\n    ) {\n        return true\n    }\n\n    return false;\n}\n\nexport function getBase58CheckAddressFromPriKeyBase64String(priKeyBase64String) {\n    const priKeyBytes = base64DecodeFromString(priKeyBase64String);\n    const pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = computeAddress(pubBytes);\n\n    return getBase58CheckAddress(addressBytes);\n}\n\nexport function getHexStrAddressFromPriKeyBase64String(priKeyBase64String) {\n    const priKeyBytes = base64DecodeFromString(priKeyBase64String);\n    const pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = computeAddress(pubBytes);\n    const addressHex = byteArray2hexStr(addressBytes);\n\n    return addressHex;\n}\n\nexport function getAddressFromPriKeyBase64String(priKeyBase64String) {\n    const priKeyBytes = base64DecodeFromString(priKeyBase64String);\n    const pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = computeAddress(pubBytes);\n    const addressBase64 = base64EncodeToString(addressBytes);\n\n    return addressBase64;\n}\n\nexport function getPubKeyFromPriKey(priKeyBytes) {\n    const ec = new EC('secp256k1');\n    const key = ec.keyFromPrivate(priKeyBytes, 'bytes');\n    const pubkey = key.getPublic();\n    const x = pubkey.x;\n    const y = pubkey.y;\n\n    let xHex = x.toString('hex');\n\n    while (xHex.length < 64) {\n        xHex = `0${xHex}`;\n    }\n\n    let yHex = y.toString('hex');\n\n    while (yHex.length < 64) {\n        yHex = `0${yHex}`;\n    }\n\n    const pubkeyHex = `04${xHex}${yHex}`;\n    const pubkeyBytes = hexStr2byteArray(pubkeyHex);\n\n    return pubkeyBytes;\n}\n\nexport function ECKeySign(hashBytes, priKeyBytes) {\n    const ec = new EC('secp256k1');\n    const key = ec.keyFromPrivate(priKeyBytes, 'bytes');\n    const signature = key.sign(hashBytes);\n    const r = signature.r;\n    const s = signature.s;\n    const id = signature.recoveryParam;\n\n    let rHex = r.toString('hex');\n\n    while (rHex.length < 64) {\n        rHex = `0${rHex}`;\n    }\n\n    let sHex = s.toString('hex');\n\n    while (sHex.length < 64) {\n        sHex = `0${sHex}`;\n    }\n\n    const idHex = byte2hexStr(id);\n    const signHex = rHex + sHex + idHex;\n\n    return signHex;\n}\n\nexport function SHA256(msgBytes) {\n    const msgHex = byteArray2hexStr(msgBytes);\n    const hashHex = sha256('0x' + msgHex).replace(/^0x/, '')\n    return hexStr2byteArray(hashHex);\n}\n\nexport function passwordToAddress(password) {\n    const com_priKeyBytes = base64DecodeFromString(password);\n    const com_addressBytes = getAddressFromPriKey(com_priKeyBytes);\n\n    return getBase58CheckAddress(com_addressBytes);\n}\n\nexport function pkToAddress(privateKey) {\n    const com_priKeyBytes = hexStr2byteArray(privateKey);\n    const com_addressBytes = getAddressFromPriKey(com_priKeyBytes);\n\n    return getBase58CheckAddress(com_addressBytes);\n}\n","import {byteArray2hexStr} from './bytes';\nimport {\n    getBase58CheckAddress,\n    genPriKey,\n    getAddressFromPriKey,\n    getPubKeyFromPriKey\n} from './crypto';\n\nexport function generateAccount() {\n    const priKeyBytes = genPriKey();\n    const pubKeyBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = getAddressFromPriKey(priKeyBytes);\n\n    const privateKey = byteArray2hexStr(priKeyBytes);\n    const publicKey = byteArray2hexStr(pubKeyBytes);\n\n    return {\n        privateKey,\n        publicKey,\n        address: {\n            base58: getBase58CheckAddress(addressBytes),\n            hex: byteArray2hexStr(addressBytes)\n        }\n    }\n}\n","import {AbiCoder} from './ethersUtils';\nimport TronWeb from 'index';\nimport {ADDRESS_PREFIX, ADDRESS_PREFIX_REGEX} from 'utils/address';\n\nconst abiCoder = new AbiCoder();\n\nexport function decodeParams(names, types, output, ignoreMethodHash) {\n\n    if (!output || typeof output === 'boolean') {\n        ignoreMethodHash = output;\n        output = types;\n        types = names;\n        names = [];\n    }\n\n    if (ignoreMethodHash && output.replace(/^0x/, '').length % 64 === 8)\n        output = '0x' + output.replace(/^0x/, '').substring(8);\n\n    if (output.replace(/^0x/, '').length % 64)\n        throw new Error('The encoded string is not valid. Its length must be a multiple of 64.');\n\n    // workaround for unsupported trcToken type\n    types = types.map(type => {\n        if (/trcToken/.test(type)) {\n            type = type.replace(/trcToken/, 'uint256')\n        }\n        return type\n    })\n\n    return abiCoder.decode(types, output).reduce((obj, arg, index) => {\n        if (types[index] == 'address')\n            arg = ADDRESS_PREFIX + arg.substr(2).toLowerCase();\n\n        if (names.length)\n            obj[names[index]] = arg;\n        else obj.push(arg);\n\n        return obj;\n    }, names.length ? {} : []);\n}\n\nexport function encodeParams(types, values) {\n\n    for (let i = 0; i < types.length; i++) {\n        if (types[i] === 'address') {\n            values[i] = TronWeb.address.toHex(values[i]).replace(ADDRESS_PREFIX_REGEX, '0x');\n        }\n    }\n\n    return abiCoder.encode(types, values);\n}\n","import * as accounts from './accounts';\nimport * as base58 from './base58';\nimport * as bytes from './bytes';\nimport * as crypto from './crypto';\nimport * as code from './code';\nimport * as abi from './abi';\nimport * as ethersUtils from './ethersUtils';\n\nimport validator from 'validator';\nimport BigNumber from 'bignumber.js';\nimport {ADDRESS_PREFIX} from 'utils/address';\n\nconst utils = {\n    isValidURL(url) {\n        if (typeof url !== 'string')\n            return false;\n        return validator.isURL(url.toString(), {\n            protocols: ['http', 'https'],\n            require_tld: false\n        });\n    },\n\n    isObject(obj) {\n        return obj === Object(obj) && Object.prototype.toString.call(obj) !== '[object Array]';\n    },\n\n    isArray(array) {\n        return Array.isArray(array);\n    },\n\n    isJson(string) {\n        try {\n            return !!JSON.parse(string);\n        } catch (ex) {\n            return false;\n        }\n    },\n\n    isBoolean(bool) {\n        return typeof bool === 'boolean';\n    },\n\n    isBigNumber(number) {\n        return number && (number instanceof BigNumber || (number.constructor && number.constructor.name === 'BigNumber'));\n    },\n\n    isString(string) {\n        return typeof string === 'string' || (string && string.constructor && string.constructor.name === 'String');\n    },\n\n    isFunction(obj) {\n        return typeof obj === 'function';\n    },\n\n    isHex(string) {\n        return (typeof string === 'string'\n            && !isNaN(parseInt(string, 16))\n            && /^(0x|)[a-fA-F0-9]+$/.test(string));\n    },\n\n    isInteger(number) {\n        if (number === null)\n            return false\n        return Number.isInteger(\n            Number(number)\n        );\n    },\n\n    hasProperty(obj, property) {\n        return Object.prototype.hasOwnProperty.call(obj, property);\n    },\n\n    hasProperties(obj, ...properties) {\n        return properties.length && !properties.map(property => {\n            return this.hasProperty(obj, property)\n        }).includes(false);\n    },\n\n    mapEvent(event) {\n        let data = {\n            block: event.block_number,\n            timestamp: event.block_timestamp,\n            contract: event.contract_address,\n            name: event.event_name,\n            transaction: event.transaction_id,\n            result: event.result,\n            resourceNode: event.resource_Node || (event._unconfirmed ? 'fullNode' : 'solidityNode')\n        };\n        if (event._unconfirmed) {\n            data.unconfirmed = event._unconfirmed\n        }\n        if (event._fingerprint) {\n            data.fingerprint = event._fingerprint;\n        }\n        return data;\n    },\n\n    parseEvent(event, {inputs: abi}) {\n        if (!event.result)\n            return event;\n\n        if (this.isObject(event.result)) {\n            for (var i = 0; i < abi.length; i++) {\n                let obj = abi[i];\n                if (obj.type == 'address' && obj.name in event.result)\n                    event.result[obj.name] = ADDRESS_PREFIX + event.result[obj.name].substr(2).toLowerCase();\n            }\n        } else if (this.isArray(event.result)) {\n            event.result = event.result.reduce((obj, result, index) => {\n                const {\n                    name,\n                    type\n                } = abi[index];\n\n                if (type == 'address')\n                    result = ADDRESS_PREFIX + result.substr(2).toLowerCase();\n\n                obj[name] = result;\n\n                return obj;\n            }, {});\n        }\n\n        return event;\n    },\n\n    padLeft(input, padding, amount) {\n        let res = input.toString();\n\n        while (res.length < amount)\n            res = padding + res;\n\n        return res;\n    },\n\n    isNotNullOrUndefined(val) {\n        return val !== null && typeof val !== 'undefined';\n    },\n\n    async sleep(millis = 1000){\n        return new Promise(resolve => setTimeout(resolve, millis));\n    }\n}\n\nexport default {\n    ...utils,\n    code,\n    accounts,\n    base58,\n    bytes,\n    crypto,\n    abi,\n    ethersUtils\n};\n","import TronWeb from 'index';\nimport utils from 'utils';\nimport {AbiCoder} from 'utils/ethersUtils';\nimport Validator from 'paramValidator';\nimport {ADDRESS_PREFIX_REGEX} from 'utils/address';\nimport injectpromise from 'injectpromise';\n\nlet self;\n\n//helpers\n\nfunction toHex(value) {\n    return TronWeb.address.toHex(value);\n}\n\nfunction fromUtf8(value) {\n    return self.tronWeb.fromUtf8(value);\n}\n\nfunction resultManager(transaction, callback) {\n    if (transaction.Error)\n        return callback(transaction.Error);\n\n    if (transaction.result && transaction.result.message) {\n        return callback(\n            self.tronWeb.toUtf8(transaction.result.message)\n        );\n    }\n\n    return callback(null, transaction);\n}\n\n\nexport default class TransactionBuilder {\n    constructor(tronWeb = false) {\n        if (!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n        self = this;\n        this.tronWeb = tronWeb;\n        this.injectPromise = injectpromise(this);\n        this.validator = new Validator(tronWeb);\n    }\n\n    sendTrx(to = false, amount = 0, from = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(from)) {\n            callback = from;\n            from = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(from)) {\n            options = from;\n            from = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.sendTrx, to, amount, from, options);\n\n        // accept amounts passed as strings\n        amount = parseInt(amount)\n\n        if (this.validator.notValid([\n            {\n                name: 'recipient',\n                type: 'address',\n                value: to\n            },\n            {\n                name: 'origin',\n                type: 'address',\n                value: from\n            },\n            {\n                names: ['recipient', 'origin'],\n                type: 'notEqual',\n                msg: 'Cannot transfer TRX to the same account'\n            },\n            {\n                name: 'amount',\n                type: 'integer',\n                gt: 0,\n                value: amount\n            }\n        ], callback))\n            return;\n\n        const data = {\n            to_address: toHex(to),\n            owner_address: toHex(from),\n            amount: amount,\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/createtransaction', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    sendToken(to = false, amount = 0, tokenID = false, from = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(from)) {\n            callback = from;\n            from = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(from)) {\n            options = from;\n            from = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.sendToken, to, amount, tokenID, from, options);\n\n        amount = parseInt(amount)\n        if (this.validator.notValid([\n            {\n                name: 'recipient',\n                type: 'address',\n                value: to\n            },\n            {\n                name: 'origin',\n                type: 'address',\n                value: from,\n            },\n            {\n                names: ['recipient', 'origin'],\n                type: 'notEqual',\n                msg: 'Cannot transfer tokens to the same account'\n            },\n            {\n                name: 'amount',\n                type: 'integer',\n                gt: 0,\n                value: amount\n            },\n            {\n                name: 'token ID',\n                type: 'tokenId',\n                value: tokenID\n            }\n        ], callback))\n            return;\n\n        const data = {\n            to_address: toHex(to),\n            owner_address: toHex(from),\n            asset_name: fromUtf8(tokenID),\n            amount: parseInt(amount)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/transferasset', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    purchaseToken(issuerAddress = false, tokenID = false, amount = 0, buyer = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(buyer)) {\n            callback = buyer;\n            buyer = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(buyer)) {\n            options = buyer;\n            buyer = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.purchaseToken, issuerAddress, tokenID, amount, buyer, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'buyer',\n                type: 'address',\n                value: buyer\n            },\n            {\n                name: 'issuer',\n                type: 'address',\n                value: issuerAddress\n            },\n            {\n                names: ['buyer', 'issuer'],\n                type: 'notEqual',\n                msg: 'Cannot purchase tokens from same account'\n            },\n            {\n                name: 'amount',\n                type: 'integer',\n                gt: 0,\n                value: amount\n            },\n            {\n                name: 'token ID',\n                type: 'tokenId',\n                value: tokenID\n            }\n        ], callback))\n            return;\n\n        const data = {\n            to_address: toHex(issuerAddress),\n            owner_address: toHex(buyer),\n            asset_name: fromUtf8(tokenID),\n            amount: parseInt(amount)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/participateassetissue', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    freezeBalance(amount = 0, duration = 3, resource = \"BANDWIDTH\", address = this.tronWeb.defaultAddress.hex, receiverAddress = undefined, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(receiverAddress)) {\n            callback = receiverAddress;\n            receiverAddress = undefined;\n        } else if (utils.isObject(receiverAddress)) {\n            options = receiverAddress;\n            receiverAddress = undefined;\n        }\n\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(address)) {\n            options = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (utils.isFunction(duration)) {\n            callback = duration;\n            duration = 3;\n        }\n\n        if (utils.isFunction(resource)) {\n            callback = resource;\n            resource = \"BANDWIDTH\";\n        }\n\n        if (!callback)\n            return this.injectPromise(this.freezeBalance, amount, duration, resource, address, receiverAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'origin',\n                type: 'address',\n                value: address\n            },\n            {\n                name: 'receiver',\n                type: 'address',\n                value: receiverAddress,\n                optional: true\n            },\n            {\n                name: 'amount',\n                type: 'integer',\n                gt: 0,\n                value: amount\n            },\n            {\n                name: 'duration',\n                type: 'integer',\n                gte: 3,\n                value: duration\n            },\n            {\n                name: 'resource',\n                type: 'resource',\n                value: resource,\n                msg: 'Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY'\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(address),\n            frozen_balance: parseInt(amount),\n            frozen_duration: parseInt(duration),\n            resource: resource\n        }\n\n        if (utils.isNotNullOrUndefined(receiverAddress) && toHex(receiverAddress) !== toHex(address)) {\n            data.receiver_address = toHex(receiverAddress)\n        }\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/freezebalance', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    unfreezeBalance(resource = \"BANDWIDTH\", address = this.tronWeb.defaultAddress.hex, receiverAddress = undefined, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(receiverAddress)) {\n            callback = receiverAddress;\n            receiverAddress = undefined;\n        } else if (utils.isObject(receiverAddress)) {\n            options = receiverAddress;\n            receiverAddress = undefined;\n        }\n\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(address)) {\n            options = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (utils.isFunction(resource)) {\n            callback = resource;\n            resource = \"BANDWIDTH\";\n        }\n\n        if (!callback)\n            return this.injectPromise(this.unfreezeBalance, resource, address, receiverAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'origin',\n                type: 'address',\n                value: address\n            },\n            {\n                name: 'receiver',\n                type: 'address',\n                value: receiverAddress,\n                optional: true\n            },\n            {\n                name: 'resource',\n                type: 'resource',\n                value: resource,\n                msg: 'Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY'\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(address),\n            resource: resource\n        }\n\n        if (utils.isNotNullOrUndefined(receiverAddress) && toHex(receiverAddress) !== toHex(address)) {\n            data.receiver_address = toHex(receiverAddress)\n        }\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/unfreezebalance', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    withdrawBlockRewards(address = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(address)) {\n            options = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.withdrawBlockRewards, address, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'origin',\n                type: 'address',\n                value: address\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(address)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/withdrawbalance', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    applyForSR(\n        address = this.tronWeb.defaultAddress.hex,\n        url = false,\n        options,\n        callback = false\n    ) {\n        console.log(toHex(address), utils.isObject(url))\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (utils.isObject(url) && utils.isValidURL(address)) {\n            options = url;\n            url = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.applyForSR, address, url, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'origin',\n                type: 'address',\n                value: address\n            },\n            {\n                name: 'url',\n                type: 'url',\n                value: url,\n                msg: 'Invalid url provided'\n            }\n        ], callback))\n            return;\n\n        console.log(toHex(address))\n\n        const data = {\n            owner_address: toHex(address),\n            url: fromUtf8(url)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/createwitness', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    vote(votes = {}, voterAddress = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(voterAddress)) {\n            callback = voterAddress;\n            voterAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(voterAddress)) {\n            options = voterAddress;\n            voterAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.vote, votes, voterAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'voter',\n                type: 'address',\n                value: voterAddress\n            },\n            {\n                name: 'votes',\n                type: 'notEmptyObject',\n                value: votes\n            }\n        ], callback))\n            return;\n\n        let invalid = false;\n\n        votes = Object.entries(votes).map(([srAddress, voteCount]) => {\n            if (invalid)\n                return;\n\n            if (this.validator.notValid([\n                {\n                    name: 'SR',\n                    type: 'address',\n                    value: srAddress\n                },\n                {\n                    name: 'vote count',\n                    type: 'integer',\n                    gt: 0,\n                    value: voteCount,\n                    msg: 'Invalid vote count provided for SR: ' + srAddress\n                }\n            ]))\n                return invalid = true;\n\n            return {\n                vote_address: toHex(srAddress),\n                vote_count: parseInt(voteCount)\n            };\n        });\n\n        if (invalid)\n            return;\n\n        const data = {\n            owner_address: toHex(voterAddress),\n            votes,\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/votewitnessaccount', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    createSmartContract(options = {}, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.createSmartContract, options, issuerAddress);\n\n        const feeLimit = options.feeLimit || 1_000_000_000;\n        let userFeePercentage = options.userFeePercentage;\n        if (typeof userFeePercentage !== 'number' && !userFeePercentage) {\n            userFeePercentage = 100;\n        }\n        const originEnergyLimit = options.originEnergyLimit || 10_000_000;\n        const callValue = options.callValue || 0;\n        const tokenValue = options.tokenValue;\n        const tokenId = options.tokenId || options.token_id;\n\n        let {\n            abi = false,\n            bytecode = false,\n            parameters = [],\n            name = \"\"\n        } = options;\n\n        if (abi && utils.isString(abi)) {\n            try {\n                abi = JSON.parse(abi);\n            } catch {\n                return callback('Invalid options.abi provided');\n            }\n        }\n\n        if (abi.entrys)\n            abi = abi.entrys;\n\n        if (!utils.isArray(abi))\n            return callback('Invalid options.abi provided');\n\n\n        const payable = abi.some(func => {\n            return func.type == 'constructor' && func.payable;\n        });\n\n        if (this.validator.notValid([\n            {\n                name: 'bytecode',\n                type: 'hex',\n                value: bytecode\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gt: 0,\n                lte: 1_000_000_000\n            },\n            {\n                name: 'callValue',\n                type: 'integer',\n                value: callValue,\n                gte: 0\n            },\n            {\n                name: 'userFeePercentage',\n                type: 'integer',\n                value: userFeePercentage,\n                gte: 0,\n                lte: 100\n            },\n            {\n                name: 'originEnergyLimit',\n                type: 'integer',\n                value: originEnergyLimit,\n                gte: 0,\n                lte: 10_000_000\n            },\n            {\n                name: 'parameters',\n                type: 'array',\n                value: parameters\n            },\n            {\n                name: 'issuer',\n                type: 'address',\n                value: issuerAddress\n            },\n            {\n                name: 'tokenValue',\n                type: 'integer',\n                value: tokenValue,\n                gte: 0,\n                optional: true\n            },\n            {\n                name: 'tokenId',\n                type: 'integer',\n                value: tokenId,\n                gte: 0,\n                optional: true\n            }\n        ], callback))\n            return;\n\n        if (payable && callValue == 0 && tokenValue == 0)\n            return callback('When contract is payable, options.callValue or options.tokenValue must be a positive integer');\n\n        if (!payable && (callValue > 0 || tokenValue > 0))\n            return callback('When contract is not payable, options.callValue and options.tokenValue must be 0');\n\n\n        var constructorParams = abi.find(\n            (it) => {\n                return it.type === 'constructor';\n            }\n        );\n\n        if (typeof constructorParams !== 'undefined' && constructorParams) {\n            const abiCoder = new AbiCoder();\n            const types = [];\n            const values = [];\n            constructorParams = constructorParams.inputs;\n\n            if (parameters.length != constructorParams.length)\n                return callback(`constructor needs ${constructorParams.length} but ${parameters.length} provided`);\n\n            for (let i = 0; i < parameters.length; i++) {\n                let type = constructorParams[i].type;\n                let value = parameters[i];\n\n                if (!type || !utils.isString(type) || !type.length)\n                    return callback('Invalid parameter type provided: ' + type);\n\n                if (type == 'address')\n                    value = toHex(value).replace(ADDRESS_PREFIX_REGEX, '0x');\n                else if (type == 'address[]')\n                    value = value.map(v => toHex(v).replace(ADDRESS_PREFIX_REGEX, '0x'));\n\n                types.push(type);\n                values.push(value);\n            }\n\n            try {\n                parameters = abiCoder.encode(types, values).replace(/^(0x)/, '');\n            } catch (ex) {\n                return callback(ex);\n            }\n        } else parameters = '';\n\n        const args = {\n            owner_address: toHex(issuerAddress),\n            fee_limit: parseInt(feeLimit),\n            call_value: parseInt(callValue),\n            consume_user_resource_percent: userFeePercentage,\n            origin_energy_limit: originEnergyLimit,\n            abi: JSON.stringify(abi),\n            bytecode,\n            parameter: parameters,\n            name\n        };\n\n        // tokenValue and tokenId can cause errors if provided when the trx10 proposal has not been approved yet. So we set them only if they are passed to the method.\n        if (utils.isNotNullOrUndefined(tokenValue))\n            args.call_token_value = parseInt(tokenValue)\n        if (utils.isNotNullOrUndefined(tokenId))\n            args.token_id = parseInt(tokenId)\n        if (options && options.permissionId)\n            args.Permission_id = options.permissionId;\n\n        this.tronWeb.fullNode.request('wallet/deploycontract', args, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    triggerSmartContract(...params) {\n        if (typeof params[2] !== 'object') {\n            params[2] = {\n                feeLimit: params[2],\n                callValue: params[3]\n            }\n            params.splice(3, 1)\n        }\n        return this._triggerSmartContract(...params);\n    }\n\n    triggerConstantContract(...params) {\n        params[2]._isConstant = true\n        return this.triggerSmartContract(...params);\n    }\n\n    triggerConfirmedConstantContract(...params) {\n        params[2]._isConstant = true\n        params[2].confirmed = true\n        return this.triggerSmartContract(...params);\n    }\n\n    _triggerSmartContract(\n        contractAddress,\n        functionSelector,\n        options = {},\n        parameters = [],\n        issuerAddress = this.tronWeb.defaultAddress.hex,\n        callback = false\n    ) {\n\n        if (utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (utils.isFunction(parameters)) {\n            callback = parameters;\n            parameters = [];\n        }\n\n        if (!callback) {\n            return this.injectPromise(\n                this._triggerSmartContract,\n                contractAddress,\n                functionSelector,\n                options,\n                parameters,\n                issuerAddress\n            );\n        }\n\n        let {\n            tokenValue,\n            tokenId,\n            callValue,\n            feeLimit,\n        } = Object.assign({\n            callValue: 0,\n            feeLimit: 1_000_000_000\n        }, options)\n\n        if (this.validator.notValid([\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gt: 0,\n                lte: 1_000_000_000\n            },\n            {\n                name: 'callValue',\n                type: 'integer',\n                value: callValue,\n                gte: 0\n            },\n            {\n                name: 'parameters',\n                type: 'array',\n                value: parameters\n            },\n            {\n                name: 'contract',\n                type: 'address',\n                value: contractAddress\n            },\n            {\n                name: 'issuer',\n                type: 'address',\n                value: issuerAddress,\n                optional: true\n            },\n            {\n                name: 'tokenValue',\n                type: 'integer',\n                value: tokenValue,\n                gte: 0,\n                optional: true\n            },\n            {\n                name: 'tokenId',\n                type: 'integer',\n                value: tokenId,\n                gte: 0,\n                optional: true\n            },\n            {\n                name: 'function selector',\n                type: 'not-empty-string',\n                value: functionSelector\n            }\n        ], callback))\n            return;\n\n        functionSelector = functionSelector.replace('/\\s*/g', '');\n\n        if (parameters.length) {\n            const abiCoder = new AbiCoder();\n            let types = [];\n            const values = [];\n\n            for (let i = 0; i < parameters.length; i++) {\n                let {type, value} = parameters[i];\n\n                if (!type || !utils.isString(type) || !type.length)\n                    return callback('Invalid parameter type provided: ' + type);\n\n                if (type == 'address')\n                    value = toHex(value).replace(ADDRESS_PREFIX_REGEX, '0x');\n                else if (type == 'address[]')\n                    value = value.map(v => toHex(v).replace(ADDRESS_PREFIX_REGEX, '0x'));\n\n                types.push(type);\n                values.push(value);\n            }\n\n            try {\n                // workaround for unsupported trcToken type\n                types = types.map(type => {\n                    if (/trcToken/.test(type)) {\n                        type = type.replace(/trcToken/, 'uint256')\n                    }\n                    return type\n                })\n\n                parameters = abiCoder.encode(types, values).replace(/^(0x)/, '');\n            } catch (ex) {\n                return callback(ex);\n            }\n        } else parameters = '';\n\n        const args = {\n            contract_address: toHex(contractAddress),\n            owner_address: toHex(issuerAddress),\n            function_selector: functionSelector,\n            parameter: parameters\n        };\n\n        if (!options._isConstant) {\n            args.call_value = parseInt(callValue)\n            args.fee_limit = parseInt(feeLimit)\n            if (utils.isNotNullOrUndefined(tokenValue))\n                args.call_token_value = parseInt(tokenValue)\n            if (utils.isNotNullOrUndefined(tokenId))\n                args.token_id = parseInt(tokenId)\n        }\n\n        if (options.permissionId) {\n            args.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb[options.confirmed ? 'solidityNode' : 'fullNode'].request(`wallet${options.confirmed ? 'solidity' : ''}/trigger${options._isConstant ? 'constant' : 'smart'}contract`, args, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    clearABI(contractAddress, ownerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.clearABI, contractAddress, ownerAddress);\n\n        if (!this.tronWeb.isAddress(contractAddress))\n            return callback('Invalid contract address provided');\n\n        if (!this.tronWeb.isAddress(ownerAddress))\n            return callback('Invalid owner address provided');\n\n        const data = {\n            contract_address: toHex(contractAddress),\n            owner_address: toHex(ownerAddress)\n        };\n\n        if (this.tronWeb.trx.cache.contracts[contractAddress]) {\n            delete this.tronWeb.trx.cache.contracts[contractAddress]\n        }\n        this.tronWeb.fullNode.request('wallet/clearabi', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n\n    }\n\n    updateBrokerage(brokerage, ownerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.updateBrokerage, brokerage, ownerAddress);\n\n        if (!utils.isNotNullOrUndefined(brokerage))\n            return callback('Invalid brokerage provided');\n\n        if (!utils.isInteger(brokerage) || brokerage < 0 || brokerage > 100)\n            return callback('Brokerage must be an integer between 0 and 100');\n\n        if (!this.tronWeb.isAddress(ownerAddress))\n            return callback('Invalid owner address provided');\n\n        const data = {\n            brokerage: parseInt(brokerage),\n            owner_address: toHex(ownerAddress)\n        };\n\n        this.tronWeb.fullNode.request('wallet/updateBrokerage', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n\n    }\n\n    createToken(options = {}, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.createToken, options, issuerAddress);\n\n        const {\n            name = false,\n            abbreviation = false,\n            description = false,\n            url = false,\n            totalSupply = 0,\n            trxRatio = 1, // How much TRX will `tokenRatio` cost?\n            tokenRatio = 1, // How many tokens will `trxRatio` afford?\n            saleStart = Date.now(),\n            saleEnd = false,\n            freeBandwidth = 0, // The creator's \"donated\" bandwidth for use by token holders\n            freeBandwidthLimit = 0, // Out of `totalFreeBandwidth`, the amount each token holder get\n            frozenAmount = 0,\n            frozenDuration = 0,\n            // for now there is no default for the following values\n            voteScore,\n            precision\n        } = options;\n\n        if (this.validator.notValid([\n            {\n                name: 'Supply amount',\n                type: 'positive-integer',\n                value: totalSupply\n            },\n            {\n                name: 'TRX ratio',\n                type: 'positive-integer',\n                value: trxRatio\n            },\n            {\n                name: 'Token ratio',\n                type: 'positive-integer',\n                value: tokenRatio\n            },\n            {\n                name: 'token abbreviation',\n                type: 'not-empty-string',\n                value: abbreviation\n            },\n            {\n                name: 'token name',\n                type: 'not-empty-string',\n                value: name\n            },\n            {\n                name: 'token description',\n                type: 'not-empty-string',\n                value: description\n            },\n            {\n                name: 'token url',\n                type: 'url',\n                value: url\n            },\n            {\n                name: 'issuer',\n                type: 'address',\n                value: issuerAddress\n            },\n            {\n                name: 'sale start timestamp',\n                type: 'integer',\n                value: saleStart,\n                gte: Date.now()\n            },\n            {\n                name: 'sale end timestamp',\n                type: 'integer',\n                value: saleEnd,\n                gt: saleStart\n            },\n            {\n                name: 'Free bandwidth amount',\n                type: 'integer',\n                value: freeBandwidth,\n                gte: 0\n            },\n            {\n                name: 'Free bandwidth limit',\n                type: 'integer',\n                value: freeBandwidthLimit,\n                gte: 0\n            },\n            {\n                name: 'Frozen supply',\n                type: 'integer',\n                value: frozenAmount,\n                gte: 0\n            },\n            {\n                name: 'Frozen duration',\n                type: 'integer',\n                value: frozenDuration,\n                gte: 0\n            }\n        ], callback))\n            return;\n\n        if (utils.isNotNullOrUndefined(voteScore) && (!utils.isInteger(voteScore) || voteScore <= 0))\n            return callback('voteScore must be a positive integer greater than 0');\n\n        if (utils.isNotNullOrUndefined(precision) && (!utils.isInteger(precision) || precision <= 0 || precision > 6))\n            return callback('precision must be a positive integer > 0 and <= 6');\n\n        const data = {\n            owner_address: toHex(issuerAddress),\n            name: fromUtf8(name),\n            abbr: fromUtf8(abbreviation),\n            description: fromUtf8(description),\n            url: fromUtf8(url),\n            total_supply: parseInt(totalSupply),\n            trx_num: parseInt(trxRatio),\n            num: parseInt(tokenRatio),\n            start_time: parseInt(saleStart),\n            end_time: parseInt(saleEnd),\n            free_asset_net_limit: parseInt(freeBandwidth),\n            public_free_asset_net_limit: parseInt(freeBandwidthLimit),\n            frozen_supply: {\n                frozen_amount: parseInt(frozenAmount),\n                frozen_days: parseInt(frozenDuration)\n            }\n        }\n        if (this.tronWeb.fullnodeSatisfies('>=3.5.0') && !(parseInt(frozenAmount) > 0)) {\n            delete data.frozen_supply\n        }\n        if (precision && !isNaN(parseInt(precision))) {\n            data.precision = parseInt(precision);\n        }\n        if (voteScore && !isNaN(parseInt(voteScore))) {\n            data.vote_score = parseInt(voteScore)\n        }\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/createassetissue', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    updateAccount(accountName = false, address = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(address)) {\n            options = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback) {\n            return this.injectPromise(this.updateAccount, accountName, address, options);\n        }\n\n        if (this.validator.notValid([\n            {\n                name: 'Name',\n                type: 'not-empty-string',\n                value: accountName\n            },\n            {\n                name: 'origin',\n                type: 'address',\n                value: address\n            }\n        ], callback))\n            return;\n\n        const data = {\n            account_name: fromUtf8(accountName),\n            owner_address: toHex(address),\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/updateaccount', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    setAccountId(accountId, address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback) {\n            return this.injectPromise(this.setAccountId, accountId, address);\n        }\n\n        if (accountId && utils.isString(accountId) && accountId.startsWith('0x')) {\n            accountId = accountId.slice(2);\n        }\n\n        if (this.validator.notValid([\n            {\n                name: 'accountId',\n                type: 'hex',\n                value: accountId\n            },\n            {\n                name: 'accountId',\n                type: 'string',\n                lte: 32,\n                gte: 8,\n                value: accountId\n            },\n            {\n                name: 'origin',\n                type: 'address',\n                value: address\n            }\n        ], callback))\n            return;\n\n\n        this.tronWeb.fullNode.request('wallet/setaccountid', {\n            account_id: accountId,\n            owner_address: toHex(address),\n        }, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    updateToken(options = {}, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(issuerAddress)) {\n            options = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.updateToken, options, issuerAddress);\n\n        const {\n            description = false,\n            url = false,\n            freeBandwidth = 0, // The creator's \"donated\" bandwidth for use by token holders\n            freeBandwidthLimit = 0 // Out of `totalFreeBandwidth`, the amount each token holder get\n        } = options;\n\n\n        if (this.validator.notValid([\n            {\n                name: 'token description',\n                type: 'not-empty-string',\n                value: description\n            },\n            {\n                name: 'token url',\n                type: 'url',\n                value: url\n            },\n            {\n                name: 'issuer',\n                type: 'address',\n                value: issuerAddress\n            },\n            {\n                name: 'Free bandwidth amount',\n                type: 'positive-integer',\n                value: freeBandwidth\n            },\n            {\n                name: 'Free bandwidth limit',\n                type: 'positive-integer',\n                value: freeBandwidthLimit\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(issuerAddress),\n            description: fromUtf8(description),\n            url: fromUtf8(url),\n            new_limit: parseInt(freeBandwidth),\n            new_public_limit: parseInt(freeBandwidthLimit)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/updateasset', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    sendAsset(...args) {\n        return this.sendToken(...args);\n    }\n\n    purchaseAsset(...args) {\n        return this.purchaseToken(...args);\n    }\n\n    createAsset(...args) {\n        return this.createToken(...args);\n    }\n\n    updateAsset(...args) {\n        return this.updateToken(...args);\n    }\n\n    /**\n     * Creates a proposal to modify the network.\n     * Can only be created by a current Super Representative.\n     */\n    createProposal(parameters = false, issuerAddress = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(issuerAddress)) {\n            options = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.createProposal, parameters, issuerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'issuer',\n                type: 'address',\n                value: issuerAddress\n            }\n        ], callback))\n            return;\n\n        const invalid = 'Invalid proposal parameters provided';\n\n        if (!parameters)\n            return callback(invalid);\n\n        if (!utils.isArray(parameters))\n            parameters = [parameters];\n\n        for (let parameter of parameters) {\n            if (!utils.isObject(parameter))\n                return callback(invalid);\n        }\n\n        const data = {\n            owner_address: toHex(issuerAddress),\n            parameters: parameters\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/proposalcreate', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    /**\n     * Deletes a network modification proposal that the owner issued.\n     * Only current Super Representative can vote on a proposal.\n     */\n    deleteProposal(proposalID = false, issuerAddress = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(issuerAddress)) {\n            options = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.deleteProposal, proposalID, issuerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'issuer',\n                type: 'address',\n                value: issuerAddress\n            },\n            {\n                name: 'proposalID',\n                type: 'integer',\n                value: proposalID,\n                gte: 0\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(issuerAddress),\n            proposal_id: parseInt(proposalID)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/proposaldelete', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    /**\n     * Adds a vote to an issued network modification proposal.\n     * Only current Super Representative can vote on a proposal.\n     */\n    voteProposal(proposalID = false, isApproval = false, voterAddress = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(voterAddress)) {\n            callback = voterAddress;\n            voterAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(voterAddress)) {\n            options = voterAddress;\n            voterAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.voteProposal, proposalID, isApproval, voterAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'voter',\n                type: 'address',\n                value: voterAddress\n            },\n            {\n                name: 'proposalID',\n                type: 'integer',\n                value: proposalID,\n                gte: 0\n            },\n            {\n                name: 'has approval',\n                type: 'boolean',\n                value: isApproval\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(voterAddress),\n            proposal_id: parseInt(proposalID),\n            is_add_approval: isApproval\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/proposalapprove', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    /**\n     * Create an exchange between a token and TRX.\n     * Token Name should be a CASE SENSITIVE string.\n     * PLEASE VERIFY THIS ON TRONSCAN.\n     */\n    createTRXExchange(tokenName, tokenBalance, trxBalance, ownerAddress = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(ownerAddress)) {\n            options = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.createTRXExchange, tokenName, tokenBalance, trxBalance, ownerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'owner',\n                type: 'address',\n                value: ownerAddress\n            },\n            {\n                name: 'token name',\n                type: 'not-empty-string',\n                value: tokenName\n            },\n            {\n                name: 'token balance',\n                type: 'positive-integer',\n                value: tokenBalance\n            },\n            {\n                name: 'trx balance',\n                type: 'positive-integer',\n                value: trxBalance\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(ownerAddress),\n            first_token_id: fromUtf8(tokenName),\n            first_token_balance: tokenBalance,\n            second_token_id: '5f', // Constant for TRX.\n            second_token_balance: trxBalance\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/exchangecreate', data, 'post').then(resources => {\n            callback(null, resources);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Create an exchange between a token and another token.\n     * DO NOT USE THIS FOR TRX.\n     * Token Names should be a CASE SENSITIVE string.\n     * PLEASE VERIFY THIS ON TRONSCAN.\n     */\n    createTokenExchange(firstTokenName, firstTokenBalance, secondTokenName, secondTokenBalance, ownerAddress = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(ownerAddress)) {\n            options = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.createTokenExchange, firstTokenName, firstTokenBalance, secondTokenName, secondTokenBalance, ownerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'owner',\n                type: 'address',\n                value: ownerAddress\n            },\n            {\n                name: 'first token name',\n                type: 'not-empty-string',\n                value: firstTokenName\n            },\n            {\n                name: 'second token name',\n                type: 'not-empty-string',\n                value: secondTokenName\n            },\n            {\n                name: 'first token balance',\n                type: 'positive-integer',\n                value: firstTokenBalance\n            },\n            {\n                name: 'second token balance',\n                type: 'positive-integer',\n                value: secondTokenBalance\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(ownerAddress),\n            first_token_id: fromUtf8(firstTokenName),\n            first_token_balance: firstTokenBalance,\n            second_token_id: fromUtf8(secondTokenName),\n            second_token_balance: secondTokenBalance\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/exchangecreate', data, 'post').then(resources => {\n            callback(null, resources);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Adds tokens into a bancor style exchange.\n     * Will add both tokens at market rate.\n     * Use \"_\" for the constant value for TRX.\n     */\n    injectExchangeTokens(exchangeID = false, tokenName = false, tokenAmount = 0, ownerAddress = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(ownerAddress)) {\n            options = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.injectExchangeTokens, exchangeID, tokenName, tokenAmount, ownerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'owner',\n                type: 'address',\n                value: ownerAddress\n            },\n            {\n                name: 'token name',\n                type: 'not-empty-string',\n                value: tokenName\n            },\n            {\n                name: 'token amount',\n                type: 'integer',\n                value: tokenAmount,\n                gte: 1\n            },\n            {\n                name: 'exchangeID',\n                type: 'integer',\n                value: exchangeID,\n                gte: 0\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(ownerAddress),\n            exchange_id: parseInt(exchangeID),\n            token_id: fromUtf8(tokenName),\n            quant: parseInt(tokenAmount)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/exchangeinject', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    /**\n     * Withdraws tokens from a bancor style exchange.\n     * Will withdraw at market rate both tokens.\n     * Use \"_\" for the constant value for TRX.\n     */\n    withdrawExchangeTokens(exchangeID = false, tokenName = false, tokenAmount = 0, ownerAddress = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(ownerAddress)) {\n            options = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.withdrawExchangeTokens, exchangeID, tokenName, tokenAmount, ownerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'owner',\n                type: 'address',\n                value: ownerAddress\n            },\n            {\n                name: 'token name',\n                type: 'not-empty-string',\n                value: tokenName\n            },\n            {\n                name: 'token amount',\n                type: 'integer',\n                value: tokenAmount,\n                gte: 1\n            },\n            {\n                name: 'exchangeID',\n                type: 'integer',\n                value: exchangeID,\n                gte: 0\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(ownerAddress),\n            exchange_id: parseInt(exchangeID),\n            token_id: fromUtf8(tokenName),\n            quant: parseInt(tokenAmount)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/exchangewithdraw', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    /**\n     * Trade tokens on a bancor style exchange.\n     * Expected value is a validation and used to cap the total amt of token 2 spent.\n     * Use \"_\" for the constant value for TRX.\n     */\n    tradeExchangeTokens(exchangeID = false,\n                        tokenName = false,\n                        tokenAmountSold = 0,\n                        tokenAmountExpected = 0,\n                        ownerAddress = this.tronWeb.defaultAddress.hex,\n                        options,\n                        callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(ownerAddress)) {\n            options = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.tradeExchangeTokens, exchangeID, tokenName, tokenAmountSold, tokenAmountExpected, ownerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'owner',\n                type: 'address',\n                value: ownerAddress\n            },\n            {\n                name: 'token name',\n                type: 'not-empty-string',\n                value: tokenName\n            },\n            {\n                name: 'tokenAmountSold',\n                type: 'integer',\n                value: tokenAmountSold,\n                gte: 1\n            },\n            {\n                name: 'tokenAmountExpected',\n                type: 'integer',\n                value: tokenAmountExpected,\n                gte: 1\n            },\n            {\n                name: 'exchangeID',\n                type: 'integer',\n                value: exchangeID,\n                gte: 0\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(ownerAddress),\n            exchange_id: parseInt(exchangeID),\n            token_id: this.tronWeb.fromAscii(tokenName),\n            quant: parseInt(tokenAmountSold),\n            expected: parseInt(tokenAmountExpected)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/exchangetransaction', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    /**\n     * Update userFeePercentage.\n     */\n    updateSetting(contractAddress = false,\n                  userFeePercentage = false,\n                  ownerAddress = this.tronWeb.defaultAddress.hex,\n                  options,\n                  callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(ownerAddress)) {\n            options = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.updateSetting, contractAddress, userFeePercentage, ownerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'owner',\n                type: 'address',\n                value: ownerAddress\n            },\n            {\n                name: 'contract',\n                type: 'address',\n                value: contractAddress\n            },\n            {\n                name: 'userFeePercentage',\n                type: 'integer',\n                value: userFeePercentage,\n                gte: 0,\n                lte: 100\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(ownerAddress),\n            contract_address: toHex(contractAddress),\n            consume_user_resource_percent: userFeePercentage\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/updatesetting', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    /**\n     * Update energy limit.\n     */\n    updateEnergyLimit(contractAddress = false,\n                      originEnergyLimit = false,\n                      ownerAddress = this.tronWeb.defaultAddress.hex,\n                      options,\n                      callback = false) {\n\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(ownerAddress)) {\n            options = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.updateEnergyLimit, contractAddress, originEnergyLimit, ownerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'owner',\n                type: 'address',\n                value: ownerAddress\n            },\n            {\n                name: 'contract',\n                type: 'address',\n                value: contractAddress\n            },\n            {\n                name: 'originEnergyLimit',\n                type: 'integer',\n                value: originEnergyLimit,\n                gte: 0,\n                lte: 10_000_000\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(ownerAddress),\n            contract_address: toHex(contractAddress),\n            origin_energy_limit: originEnergyLimit\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/updateenergylimit', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    checkPermissions(permissions, type) {\n        if (permissions) {\n            if (permissions.type !== type\n                || !permissions.permission_name\n                || !utils.isString(permissions.permission_name)\n                || !utils.isInteger(permissions.threshold)\n                || permissions.threshold < 1\n                || !permissions.keys\n            ) {\n                return false\n            }\n            for (let key of permissions.keys) {\n                if (!this.tronWeb.isAddress(key.address)\n                    || !utils.isInteger(key.weight)\n                    || key.weight > permissions.threshold\n                    || key.weight < 1\n                    || (type === 2 && !permissions.operations)\n                ) {\n                    return false\n                }\n            }\n        }\n        return true\n    }\n\n    updateAccountPermissions(ownerAddress = this.tronWeb.defaultAddress.hex,\n                             ownerPermissions = false,\n                             witnessPermissions = false,\n                             activesPermissions = false,\n                             callback = false) {\n\n        if (utils.isFunction(activesPermissions)) {\n            callback = activesPermissions;\n            activesPermissions = false;\n        }\n\n        if (utils.isFunction(witnessPermissions)) {\n            callback = witnessPermissions;\n            witnessPermissions = activesPermissions = false;\n        }\n\n        if (utils.isFunction(ownerPermissions)) {\n            callback = ownerPermissions;\n            ownerPermissions = witnessPermissions = activesPermissions = false;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.updateAccountPermissions, ownerAddress, ownerPermissions, witnessPermissions, activesPermissions);\n\n        if (!this.tronWeb.isAddress(ownerAddress))\n            return callback('Invalid ownerAddress provided');\n\n        if (!this.checkPermissions(ownerPermissions, 0)) {\n            return callback('Invalid ownerPermissions provided');\n        }\n\n        if (!this.checkPermissions(witnessPermissions, 1)) {\n            return callback('Invalid witnessPermissions provided');\n        }\n\n        if (!Array.isArray(activesPermissions)) {\n            activesPermissions = [activesPermissions]\n        }\n\n        for (let activesPermission of activesPermissions) {\n            if (!this.checkPermissions(activesPermission, 2)) {\n                return callback('Invalid activesPermissions provided');\n            }\n        }\n\n        const data = {\n            owner_address: ownerAddress\n        }\n        if (ownerPermissions) {\n            data.owner = ownerPermissions\n        }\n        if (witnessPermissions) {\n            data.witness = witnessPermissions\n        }\n        if (activesPermissions) {\n            data.actives = activesPermissions.length === 1 ? activesPermissions[0] : activesPermissions\n        }\n\n        this.tronWeb.fullNode.request('wallet/accountpermissionupdate', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    async newTxID(transaction, callback) {\n\n        if (!callback)\n            return this.injectPromise(this.newTxID, transaction);\n\n        this.tronWeb.fullNode\n            .request(\n                'wallet/getsignweight',\n                transaction,\n                'post'\n            )\n            .then(newTransaction => {\n                newTransaction = newTransaction.transaction.transaction\n                if (typeof transaction.visible === 'boolean') {\n                    newTransaction.visible = transaction.visible\n                }\n                callback(null, newTransaction)\n            })\n            .catch(err => callback('Error generating a new transaction id.'));\n    }\n\n    async alterTransaction(transaction, options = {}, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.alterTransaction, transaction, options);\n\n        if (transaction.signature)\n            return callback('You can not extend the expiration of a signed transaction.')\n\n        if (options.data) {\n            if (options.dataFormat !== 'hex')\n                options.data = this.tronWeb.toHex(options.data);\n            options.data = options.data.replace(/^0x/, '')\n            if (options.data.length === 0)\n                return callback('Invalid data provided');\n            transaction.raw_data.data = options.data;\n        }\n\n        if (options.extension) {\n            options.extension = parseInt(options.extension * 1000);\n            if (isNaN(options.extension) || transaction.raw_data.expiration + options.extension <= Date.now() + 3000)\n                return callback('Invalid extension provided');\n            transaction.raw_data.expiration += options.extension;\n        }\n\n        this.newTxID(transaction, callback)\n    }\n\n    async extendExpiration(transaction, extension, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.extendExpiration, transaction, extension);\n\n        this.alterTransaction(transaction, {extension}, callback);\n    }\n\n    async addUpdateData(transaction, data, dataFormat = 'utf8', callback = false) {\n\n        if (utils.isFunction(dataFormat)) {\n            callback = dataFormat;\n            dataFormat = 'utf8';\n        }\n\n        if (!callback)\n            return this.injectPromise(this.addUpdateData, transaction, data, dataFormat);\n\n        this.alterTransaction(transaction, {data, dataFormat}, callback);\n    }\n\n}\n","import HttpProvider from './HttpProvider';\n\nexport default {\n    HttpProvider\n};","import axios from 'axios';\nimport utils from 'utils';\n\nexport default class HttpProvider {\n    constructor(host, timeout = 30000, user = false, password = false, headers = {}, statusPage = '/') {\n        if (!utils.isValidURL(host))\n            throw new Error('Invalid URL provided to HttpProvider');\n\n        if (isNaN(timeout) || timeout < 0)\n            throw new Error('Invalid timeout duration provided');\n\n        if (!utils.isObject(headers))\n            throw new Error('Invalid headers object provided');\n\n        host = host.replace(/\\/+$/, '');\n\n        this.host = host;\n        this.timeout = timeout;\n        this.user = user;\n        this.password = password;\n        this.headers = headers;\n        this.statusPage = statusPage;\n\n        this.instance = axios.create({\n            baseURL: host,\n            timeout: timeout,\n            headers: headers,\n            auth: user && {\n                user,\n                password\n            },\n        });\n    }\n\n    setStatusPage(statusPage = '/') {\n        this.statusPage = statusPage;\n    }\n\n    async isConnected(statusPage = this.statusPage) {\n        return this.request(statusPage).then(data => {\n            return utils.hasProperties(data, 'blockID', 'block_header');\n        }).catch(() => false);\n    }\n\n    request(url, payload = {}, method = 'get') {\n        method = method.toLowerCase();\n\n        return this.instance.request({\n            data: method == 'post' && Object.keys(payload).length ? payload : null,\n            params: method == 'get' && payload,\n            url,\n            method\n        }).then(({data}) => data);\n    }\n};\n","import TronWeb from 'index';\nimport utils from 'utils';\n\nexport default class Validator {\n\n    constructor(tronWeb = false) {\n        if (!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n        this.tronWeb = tronWeb;\n    }\n\n    invalid(param) {\n        return param.msg || `Invalid ${param.name}${param.type === 'address' ? ' address' : ''} provided`;\n    }\n\n    notPositive(param) {\n        return `${param.name} must be a positive integer`;\n    }\n\n    notEqual(param) {\n        return param.msg || `${param.names[0]} can not be equal to ${param.names[1]}`;\n    }\n\n    notValid(params = [], callback = new Function) {\n\n        let normalized = {};\n        let no = false;\n        for (const param of params) {\n            let {\n                name,\n                names,\n                value,\n                type,\n                gt,\n                lt,\n                gte,\n                lte,\n                se,\n                optional\n            } = param;\n            if (optional && (\n                !utils.isNotNullOrUndefined(value)\n                || (type !== 'boolean' && value === false)))\n                continue;\n            normalized[param.name] = param.value;\n            switch (type) {\n\n                case 'address':\n                    if (!this.tronWeb.isAddress(value)) {\n                        no = true;\n                    } else {\n                        normalized[name] = this.tronWeb.address.toHex(value);\n                    }\n                    break;\n\n                case 'integer':\n                    if (!utils.isInteger(value) ||\n                        (typeof gt === 'number' && value <= param.gt) ||\n                        (typeof lt === 'number' && value >= param.lt) ||\n                        (typeof gte === 'number' && value < param.gte) ||\n                        (typeof lte === 'number' && value > param.lte)) {\n                        no = true;\n                    }\n                    break;\n\n                case 'positive-integer':\n                    if (!utils.isInteger(value) || value <= 0) {\n                        callback(this.notPositive(param));\n                        return;\n                    }\n                    break;\n\n                case 'tokenId':\n                    if (!utils.isString(value) || !value.length) {\n                        no = true;\n                    }\n                    break;\n\n                case 'notEmptyObject':\n                    if (!utils.isObject(value) || !Object.keys(value).length) {\n                        no = true;\n                    }\n                    break;\n\n                case 'notEqual':\n                    if (normalized[names[0]] === normalized[names[1]]) {\n                        callback(this.notEqual(param));\n                        return true;\n                    }\n                    break;\n\n                case 'resource':\n                    if (!['BANDWIDTH', 'ENERGY'].includes(value)) {\n                        no = true;\n                    }\n                    break;\n\n                case 'url':\n                    if (!utils.isValidURL(value)) {\n                        no = true;\n                    }\n                    break;\n\n                case 'hex':\n                    if (!utils.isHex(value)) {\n                        no = true;\n                    }\n                    break;\n\n                case 'array':\n                    if (!Array.isArray(value)) {\n                        no = true;\n                    }\n                    break;\n\n                case 'not-empty-string':\n                    if (!utils.isString(value) || !value.length) {\n                        no = true;\n                    }\n                    break;\n\n                case 'boolean':\n                    if (!utils.isBoolean(value)) {\n                        no = true;\n                    }\n                    break;\n                case 'string':\n                    if (!utils.isString(value) ||\n                        (typeof gt === 'number' && value.length <= param.gt) ||\n                        (typeof lt === 'number' && value.length >= param.lt) ||\n                        (typeof gte === 'number' && value.length < param.gte) ||\n                        (typeof lte === 'number' && value.length > param.lte)) {\n                        no = true;\n                    }\n                    break;\n            }\n            if (no) {\n                callback(this.invalid(param));\n                return true;\n            }\n        }\n        return false;\n    }\n}\n\n","import TronWeb from 'index';\nimport utils from 'utils';\nimport {keccak256, toUtf8Bytes, recoverAddress, SigningKey} from 'utils/ethersUtils';\nimport {ADDRESS_PREFIX} from 'utils/address';\nimport Validator from \"../paramValidator\";\nimport injectpromise from 'injectpromise';\n\nconst TRX_MESSAGE_HEADER = '\\x19TRON Signed Message:\\n32';\n// it should be: '\\x15TRON Signed Message:\\n32';\nconst ETH_MESSAGE_HEADER = '\\x19Ethereum Signed Message:\\n32';\n\nfunction toHex(value) {\n    return TronWeb.address.toHex(value);\n}\n\nexport default class Trx {\n    constructor(tronWeb = false) {\n        if (!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n\n        this.tronWeb = tronWeb;\n        this.injectPromise = injectpromise(this);\n        this.cache = {\n            contracts: {}\n        }\n        this.validator = new Validator(tronWeb);\n    }\n\n    _parseToken(token) {\n        return {\n            ...token,\n            name: this.tronWeb.toUtf8(token.name),\n            abbr: token.abbr && this.tronWeb.toUtf8(token.abbr),\n            description: token.description && this.tronWeb.toUtf8(token.description),\n            url: token.url && this.tronWeb.toUtf8(token.url)\n        };\n    }\n\n    getCurrentBlock(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getCurrentBlock);\n\n        this.tronWeb.fullNode.request('wallet/getnowblock').then(block => {\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getConfirmedCurrentBlock(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getConfirmedCurrentBlock);\n\n        this.tronWeb.solidityNode.request('walletsolidity/getnowblock').then(block => {\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getBlock(block = this.tronWeb.defaultBlock, callback = false) {\n        if (utils.isFunction(block)) {\n            callback = block;\n            block = this.tronWeb.defaultBlock;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getBlock, block);\n\n        if (block === false)\n            return callback('No block identifier provided');\n\n        if (block == 'earliest')\n            block = 0;\n\n        if (block == 'latest')\n            return this.getCurrentBlock(callback);\n\n        if (isNaN(block) && utils.isHex(block))\n            return this.getBlockByHash(block, callback);\n\n        this.getBlockByNumber(block, callback);\n    }\n\n    getBlockByHash(blockHash, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getBlockByHash, blockHash);\n\n        this.tronWeb.fullNode.request('wallet/getblockbyid', {\n            value: blockHash\n        }, 'post').then(block => {\n            if (!Object.keys(block).length)\n                return callback('Block not found');\n\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getBlockByNumber(blockID, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getBlockByNumber, blockID);\n\n        if (!utils.isInteger(blockID) || blockID < 0)\n            return callback('Invalid block number provided');\n\n        this.tronWeb.fullNode.request('wallet/getblockbynum', {\n            num: parseInt(blockID)\n        }, 'post').then(block => {\n            if (!Object.keys(block).length)\n                return callback('Block not found');\n\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getBlockTransactionCount(block = this.tronWeb.defaultBlock, callback = false) {\n        if (utils.isFunction(block)) {\n            callback = block;\n            block = this.tronWeb.defaultBlock;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getBlockTransactionCount, block);\n\n        this.getBlock(block).then(({transactions = []}) => {\n            callback(null, transactions.length);\n        }).catch(err => callback(err));\n    }\n\n    getTransactionFromBlock(block = this.tronWeb.defaultBlock, index, callback = false) {\n        if (utils.isFunction(index)) {\n            callback = index;\n            index = 0;\n        }\n\n        if (utils.isFunction(block)) {\n            callback = block;\n            block = this.tronWeb.defaultBlock;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getTransactionFromBlock, block, index);\n\n        this.getBlock(block).then(({transactions = false}) => {\n            if (!transactions)\n                callback('Transaction not found in block');\n            else if (typeof index == 'number') {\n                if (index >= 0 && index < transactions.length)\n                    callback(null, transactions[index]);\n                else\n                    callback('Invalid transaction index provided');\n            } else\n                callback(null, transactions);\n        }).catch(err => callback(err));\n    }\n\n    getTransaction(transactionID, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getTransaction, transactionID);\n\n        this.tronWeb.fullNode.request('wallet/gettransactionbyid', {\n            value: transactionID\n        }, 'post').then(transaction => {\n            if (!Object.keys(transaction).length)\n                return callback('Transaction not found');\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getConfirmedTransaction(transactionID, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getConfirmedTransaction, transactionID);\n\n        this.tronWeb.solidityNode.request('walletsolidity/gettransactionbyid', {\n            value: transactionID\n        }, 'post').then(transaction => {\n            if (!Object.keys(transaction).length)\n                return callback('Transaction not found');\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getUnconfirmedTransactionInfo(transactionID, callback = false) {\n        return this._getTransactionInfoById(transactionID, {confirmed: false}, callback)\n    }\n\n    getTransactionInfo(transactionID, callback = false) {\n        return this._getTransactionInfoById(transactionID, {confirmed: true}, callback)\n    }\n\n    _getTransactionInfoById(transactionID, options, callback = false) {\n        if (!callback)\n            return this.injectPromise(this._getTransactionInfoById, transactionID, options);\n\n        this.tronWeb[options.confirmed ? 'solidityNode' : 'fullNode'].request(`wallet${options.confirmed ? 'solidity' : ''}/gettransactioninfobyid`, {\n            value: transactionID\n        }, 'post').then(transaction => {\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getTransactionsToAddress(address = this.tronWeb.defaultAddress.hex, limit = 30, offset = 0, callback = false) {\n        if (utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;\n        }\n\n        if (utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getTransactionsToAddress, address, limit, offset);\n\n        address = this.tronWeb.address.toHex(address);\n\n        return this.getTransactionsRelated(address, 'to', limit, offset, callback);\n    }\n\n    getTransactionsFromAddress(address = this.tronWeb.defaultAddress.hex, limit = 30, offset = 0, callback = false) {\n        if (utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;\n        }\n\n        if (utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getTransactionsFromAddress, address, limit, offset);\n\n        address = this.tronWeb.address.toHex(address);\n\n        return this.getTransactionsRelated(address, 'from', limit, offset, callback);\n    }\n\n    async getTransactionsRelated(address = this.tronWeb.defaultAddress.hex, direction = 'all', limit = 30, offset = 0, callback = false) {\n        if (utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;\n        }\n\n        if (utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;\n        }\n\n        if (utils.isFunction(direction)) {\n            callback = direction;\n            direction = 'all';\n        }\n\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getTransactionsRelated, address, direction, limit, offset);\n\n        if (!['to', 'from', 'all'].includes(direction))\n            return callback('Invalid direction provided: Expected \"to\", \"from\" or \"all\"');\n\n        if (direction == 'all') {\n            try {\n                const [from, to] = await Promise.all([\n                    this.getTransactionsRelated(address, 'from', limit, offset),\n                    this.getTransactionsRelated(address, 'to', limit, offset)\n                ])\n\n                return callback(null, [\n                    ...from.map(tx => (tx.direction = 'from', tx)),\n                    ...to.map(tx => (tx.direction = 'to', tx))\n                ].sort((a, b) => {\n                    return b.raw_data.timestamp - a.raw_data.timestamp\n                }));\n            } catch (ex) {\n                return callback(ex);\n            }\n        }\n\n        if (!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        if (!utils.isInteger(limit) || limit < 0 || (offset && limit < 1))\n            return callback('Invalid limit provided');\n\n        if (!utils.isInteger(offset) || offset < 0)\n            return callback('Invalid offset provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.solidityNode.request(`walletextension/gettransactions${direction}this`, {\n            account: {\n                address\n            },\n            offset,\n            limit\n        }, 'post').then(({transaction}) => {\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getAccount(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getAccount, address);\n\n        if (!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.solidityNode.request('walletsolidity/getaccount', {\n            address\n        }, 'post').then(account => {\n            callback(null, account);\n        }).catch(err => callback(err));\n    }\n\n    getAccountById(id = false, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getAccountById, id);\n\n        this.getAccountInfoById(id, {confirmed: true}, callback);\n    }\n\n    getAccountInfoById(id, options, callback) {\n        if (this.validator.notValid([\n            {\n                name: 'accountId',\n                type: 'hex',\n                value: id\n            },\n            {\n                name: 'accountId',\n                type: 'string',\n                lte: 32,\n                gte: 8,\n                value: id\n            }\n        ], callback))\n            return;\n\n        if (id.startsWith('0x')) {\n            id = id.slice(2);\n        }\n\n        this.tronWeb[options.confirmed ? 'solidityNode' : 'fullNode'].request(`wallet${options.confirmed ? 'solidity' : ''}/getaccountbyid`, {\n            account_id: id\n        }, 'post').then(account => {\n            callback(null, account);\n        }).catch(err => callback(err));\n    }\n\n    getBalance(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getBalance, address);\n\n        this.getAccount(address).then(({balance = 0}) => {\n            callback(null, balance);\n        }).catch(err => callback(err));\n    }\n\n    getUnconfirmedAccount(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getUnconfirmedAccount, address);\n\n        if (!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.fullNode.request('wallet/getaccount', {\n            address\n        }, 'post').then(account => {\n            callback(null, account);\n        }).catch(err => callback(err));\n    }\n\n    getUnconfirmedAccountById(id, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getUnconfirmedAccountById, id);\n\n        this.getAccountInfoById(id, {confirmed: false}, callback);\n    }\n\n    getUnconfirmedBalance(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getUnconfirmedBalance, address);\n\n        this.getUnconfirmedAccount(address).then(({balance = 0}) => {\n            callback(null, balance);\n        }).catch(err => callback(err));\n    }\n\n    getBandwidth(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getBandwidth, address);\n\n        if (!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.fullNode.request('wallet/getaccountnet', {\n            address\n        }, 'post').then(({freeNetUsed = 0, freeNetLimit = 0, NetUsed = 0, NetLimit = 0}) => {\n            callback(null, (freeNetLimit - freeNetUsed) + (NetLimit - NetUsed));\n        }).catch(err => callback(err));\n    }\n\n    getTokensIssuedByAddress(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getTokensIssuedByAddress, address);\n\n        if (!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.fullNode.request('wallet/getassetissuebyaccount', {\n            address\n        }, 'post').then(({assetIssue = false}) => {\n            if (!assetIssue)\n                return callback(null, {});\n\n            const tokens = assetIssue.map(token => {\n                return this._parseToken(token);\n            }).reduce((tokens, token) => {\n                return tokens[token.name] = token, tokens;\n            }, {});\n\n            callback(null, tokens);\n        }).catch(err => callback(err));\n    }\n\n    getTokenFromID(tokenID = false, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getTokenFromID, tokenID);\n\n        if (utils.isInteger(tokenID))\n            tokenID = tokenID.toString()\n\n        if (!utils.isString(tokenID) || !tokenID.length)\n            return callback('Invalid token ID provided');\n\n        this.tronWeb.fullNode.request('wallet/getassetissuebyname', {\n            value: this.tronWeb.fromUtf8(tokenID)\n        }, 'post').then(token => {\n            if (!token.name)\n                return callback('Token does not exist');\n\n            callback(null, this._parseToken(token));\n        }).catch(err => callback(err));\n    }\n\n    listNodes(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.listNodes);\n\n        this.tronWeb.fullNode.request('wallet/listnodes').then(({nodes = []}) => {\n            callback(null, nodes.map(({address: {host, port}}) => (\n                `${this.tronWeb.toUtf8(host)}:${port}`\n            )));\n        }).catch(err => callback(err));\n    }\n\n    getBlockRange(start = 0, end = 30, callback = false) {\n        if (utils.isFunction(end)) {\n            callback = end;\n            end = 30;\n        }\n\n        if (utils.isFunction(start)) {\n            callback = start;\n            start = 0;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getBlockRange, start, end);\n\n        if (!utils.isInteger(start) || start < 0)\n            return callback('Invalid start of range provided');\n\n        if (!utils.isInteger(end) || end <= start)\n            return callback('Invalid end of range provided');\n\n        this.tronWeb.fullNode.request('wallet/getblockbylimitnext', {\n            startNum: parseInt(start),\n            endNum: parseInt(end) + 1\n        }, 'post').then(({block = []}) => {\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    listSuperRepresentatives(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.listSuperRepresentatives);\n\n        this.tronWeb.fullNode.request('wallet/listwitnesses').then(({witnesses = []}) => {\n            callback(null, witnesses);\n        }).catch(err => callback(err));\n    }\n\n    listTokens(limit = 0, offset = 0, callback = false) {\n        if (utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;\n        }\n\n        if (utils.isFunction(limit)) {\n            callback = limit;\n            limit = 0;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.listTokens, limit, offset);\n\n        if (!utils.isInteger(limit) || limit < 0 || (offset && limit < 1))\n            return callback('Invalid limit provided');\n\n        if (!utils.isInteger(offset) || offset < 0)\n            return callback('Invalid offset provided');\n\n        if (!limit) {\n            return this.tronWeb.fullNode.request('wallet/getassetissuelist').then(({assetIssue = []}) => {\n                callback(null, assetIssue.map(token => this._parseToken(token)));\n            }).catch(err => callback(err));\n        }\n\n        this.tronWeb.fullNode.request('wallet/getpaginatedassetissuelist', {\n            offset: parseInt(offset),\n            limit: parseInt(limit)\n        }, 'post').then(({assetIssue = []}) => {\n            callback(null, assetIssue.map(token => this._parseToken(token)));\n        }).catch(err => callback(err));\n    }\n\n    timeUntilNextVoteCycle(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.timeUntilNextVoteCycle);\n\n        this.tronWeb.fullNode.request('wallet/getnextmaintenancetime').then(({num = -1}) => {\n            if (num == -1)\n                return callback('Failed to get time until next vote cycle');\n\n            callback(null, Math.floor(num / 1000));\n        }).catch(err => callback(err));\n    }\n\n    getContract(contractAddress, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getContract, contractAddress);\n\n        if (!this.tronWeb.isAddress(contractAddress))\n            return callback('Invalid contract address provided');\n\n        if (this.cache.contracts[contractAddress]) {\n            callback(null, this.cache.contracts[contractAddress]);\n            return;\n        }\n\n        contractAddress = this.tronWeb.address.toHex(contractAddress);\n\n        this.tronWeb.fullNode.request('wallet/getcontract', {\n            value: contractAddress\n        }).then(contract => {\n            if (contract.Error)\n                return callback('Contract does not exist');\n            this.cache.contracts[contractAddress] = contract;\n            callback(null, contract);\n        }).catch(err => callback(err));\n    }\n\n    async verifyMessage(message = false, signature = false, address = this.tronWeb.defaultAddress.base58, useTronHeader = true, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.base58;\n            useTronHeader = true;\n        }\n\n        if (utils.isFunction(useTronHeader)) {\n            callback = useTronHeader;\n            useTronHeader = true;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.verifyMessage, message, signature, address, useTronHeader);\n\n        if (!utils.isHex(message))\n            return callback('Expected hex message input');\n\n        if (Trx.verifySignature(message, address, signature, useTronHeader))\n            return callback(null, true);\n\n        callback('Signature does not match');\n    }\n\n    static verifySignature(message, address, signature, useTronHeader = true) {\n        message = message.replace(/^0x/, '');\n        signature = signature.replace(/^0x/, '');\n        const messageBytes = [\n            ...toUtf8Bytes(useTronHeader ? TRX_MESSAGE_HEADER : ETH_MESSAGE_HEADER),\n            ...utils.code.hexStr2byteArray(message)\n        ];\n\n        const messageDigest = keccak256(messageBytes);\n        const recovered = recoverAddress(messageDigest, {\n            recoveryParam: signature.substring(128, 130) == '1c' ? 1 : 0,\n            r: '0x' + signature.substring(0, 64),\n            s: '0x' + signature.substring(64, 128)\n        });\n\n        const tronAddress = ADDRESS_PREFIX + recovered.substr(2);\n        const base58Address = TronWeb.address.fromHex(tronAddress);\n\n        return base58Address == TronWeb.address.fromHex(address);\n    }\n\n    async sign(transaction = false, privateKey = this.tronWeb.defaultPrivateKey, useTronHeader = true, multisig = false, callback = false) {\n\n        if (utils.isFunction(multisig)) {\n            callback = multisig;\n            multisig = false;\n        }\n\n        if (utils.isFunction(useTronHeader)) {\n            callback = useTronHeader;\n            useTronHeader = true;\n            multisig = false;\n        }\n\n        if (utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n            useTronHeader = true;\n            multisig = false;\n        }\n\n\n        if (!callback)\n            return this.injectPromise(this.sign, transaction, privateKey, useTronHeader, multisig);\n\n        // Message signing\n        if (utils.isString(transaction)) {\n\n            if (!utils.isHex(transaction))\n                return callback('Expected hex message input');\n\n            try {\n                const signatureHex = Trx.signString(transaction, privateKey, useTronHeader)\n                return callback(null, signatureHex);\n            } catch (ex) {\n                callback(ex);\n            }\n        }\n\n        if (!utils.isObject(transaction))\n            return callback('Invalid transaction provided');\n\n        if (!multisig && transaction.signature)\n            return callback('Transaction is already signed');\n\n        try {\n            if (!multisig) {\n                const address = this.tronWeb.address.toHex(\n                    this.tronWeb.address.fromPrivateKey(privateKey)\n                ).toLowerCase();\n\n                if (address !== transaction.raw_data.contract[0].parameter.value.owner_address.toLowerCase())\n                    return callback('Private key does not match address in transaction');\n            }\n            return callback(null,\n                utils.crypto.signTransaction(privateKey, transaction)\n            );\n        } catch (ex) {\n            callback(ex);\n        }\n    }\n\n    static signString(message, privateKey, useTronHeader = true) {\n        message = message.replace(/^0x/, '');\n        const signingKey = new SigningKey(privateKey);\n        const messageBytes = [\n            ...toUtf8Bytes(useTronHeader ? TRX_MESSAGE_HEADER : ETH_MESSAGE_HEADER),\n            ...utils.code.hexStr2byteArray(message)\n        ];\n\n        const messageDigest = keccak256(messageBytes);\n        const signature = signingKey.signDigest(messageDigest);\n\n        const signatureHex = [\n            '0x',\n            signature.r.substring(2),\n            signature.s.substring(2),\n            Number(signature.v).toString(16)\n        ].join('');\n\n        return signatureHex\n    }\n\n    async multiSign(transaction = false, privateKey = this.tronWeb.defaultPrivateKey, permissionId = false, callback = false) {\n\n        if (utils.isFunction(permissionId)) {\n            callback = permissionId;\n            permissionId = 0;\n        }\n\n        if (utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n            permissionId = 0;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.multiSign, transaction, privateKey, permissionId);\n\n        if (!utils.isObject(transaction) || !transaction.raw_data || !transaction.raw_data.contract)\n            return callback('Invalid transaction provided');\n\n        // If owner permission or permission id exists in transaction, do sign directly\n        // If no permission id inside transaction or user passes permission id, use old way to reset permission id\n        if (!transaction.raw_data.contract[0].Permission_id && permissionId > 0) {\n            // set permission id\n            transaction.raw_data.contract[0].Permission_id = permissionId;\n\n            // check if private key insides permission list\n            const address = this.tronWeb.address.toHex(this.tronWeb.address.fromPrivateKey(privateKey)).toLowerCase();\n            const signWeight = await this.getSignWeight(transaction, permissionId);\n\n            if (signWeight.result.code === 'PERMISSION_ERROR') {\n                return callback(signWeight.result.message);\n            }\n\n            let foundKey = false;\n            signWeight.permission.keys.map(key => {\n                if (key.address === address)\n                    foundKey = true;\n            });\n\n            if (!foundKey)\n                return callback(privateKey + ' has no permission to sign');\n\n            if (signWeight.approved_list && signWeight.approved_list.indexOf(address) != -1) {\n                return callback(privateKey + ' already sign transaction');\n            }\n\n            // reset transaction\n            if (signWeight.transaction && signWeight.transaction.transaction) {\n                transaction = signWeight.transaction.transaction;\n                if (permissionId > 0) {\n                    transaction.raw_data.contract[0].Permission_id = permissionId;\n                }\n            } else {\n                return callback('Invalid transaction provided');\n            }\n        }\n\n        // sign\n        try {\n            return callback(null, utils.crypto.signTransaction(privateKey, transaction));\n        } catch (ex) {\n            callback(ex);\n        }\n    }\n\n    async getApprovedList(transaction, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getApprovedList, transaction);\n\n        if (!utils.isObject(transaction))\n            return callback('Invalid transaction provided');\n\n\n        this.tronWeb.fullNode.request(\n            'wallet/getapprovedlist',\n            transaction,\n            'post'\n        ).then(result => {\n            callback(null, result);\n        }).catch(err => callback(err));\n    }\n\n    async getSignWeight(transaction, permissionId, callback = false) {\n        if (utils.isFunction(permissionId)) {\n            callback = permissionId;\n            permissionId = undefined;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getSignWeight, transaction, permissionId);\n\n        if (!utils.isObject(transaction) || !transaction.raw_data || !transaction.raw_data.contract)\n            return callback('Invalid transaction provided');\n\n        if (utils.isInteger(permissionId)) {\n            transaction.raw_data.contract[0].Permission_id = parseInt(permissionId);\n        } else if (typeof transaction.raw_data.contract[0].Permission_id !== 'number') {\n            transaction.raw_data.contract[0].Permission_id = 0;\n        }\n\n        if (!utils.isObject(transaction))\n            return callback('Invalid transaction provided');\n\n\n        this.tronWeb.fullNode.request(\n            'wallet/getsignweight',\n            transaction,\n            'post'\n        ).then(result => {\n            callback(null, result);\n        }).catch(err => callback(err));\n    }\n\n    sendRawTransaction(signedTransaction = false, options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!callback)\n            return this.injectPromise(this.sendRawTransaction, signedTransaction, options);\n\n        if (!utils.isObject(signedTransaction))\n            return callback('Invalid transaction provided');\n\n        if (!utils.isObject(options))\n            return callback('Invalid options provided');\n\n        if (!signedTransaction.signature || !utils.isArray(signedTransaction.signature))\n            return callback('Transaction is not signed');\n\n        this.tronWeb.fullNode.request(\n            'wallet/broadcasttransaction',\n            signedTransaction,\n            'post'\n        ).then(result => {\n            if (result.result)\n                result.transaction = signedTransaction;\n            callback(null, result);\n        }).catch(err => callback(err));\n    }\n\n    async sendTransaction(to = false, amount = false, options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (typeof options === 'string')\n            options = {privateKey: options};\n\n        if (!callback)\n            return this.injectPromise(this.sendTransaction, to, amount, options);\n\n        if (!this.tronWeb.isAddress(to))\n            return callback('Invalid recipient provided');\n\n        if (!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if (!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const transaction = await this.tronWeb.transactionBuilder.sendTrx(to, amount, address);\n            const signedTransaction = await this.sign(transaction, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async sendToken(to = false, amount = false, tokenID = false, options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (typeof options === 'string')\n            options = {privateKey: options};\n\n        if (!callback)\n            return this.injectPromise(this.sendToken, to, amount, tokenID, options);\n\n        if (!this.tronWeb.isAddress(to))\n            return callback('Invalid recipient provided');\n\n        if (!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if (utils.isInteger(tokenID))\n            tokenID = tokenID.toString()\n\n        if (!utils.isString(tokenID))\n            return callback('Invalid token ID provided');\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if (!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const transaction = await this.tronWeb.transactionBuilder.sendToken(to, amount, tokenID, address);\n            const signedTransaction = await this.sign(transaction, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    /**\n     * Freezes an amount of TRX.\n     * Will give bandwidth OR Energy and TRON Power(voting rights)\n     * to the owner of the frozen tokens.\n     *\n     * @param amount - is the number of frozen trx\n     * @param duration - is the duration in days to be frozen\n     * @param resource - is the type, must be either \"ENERGY\" or \"BANDWIDTH\"\n     * @param options\n     * @param callback\n     */\n    async freezeBalance(amount = 0, duration = 3, resource = \"BANDWIDTH\", options = {}, receiverAddress = undefined, callback = false) {\n        if (utils.isFunction(receiverAddress)) {\n            callback = receiverAddress;\n            receiverAddress = undefined;\n        }\n        if (utils.isFunction(duration)) {\n            callback = duration;\n            duration = 3;\n        }\n\n        if (utils.isFunction(resource)) {\n            callback = resource;\n            resource = \"BANDWIDTH\";\n        }\n\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (typeof options === 'string')\n            options = {privateKey: options};\n\n        if (!callback)\n            return this.injectPromise(this.freezeBalance, amount, duration, resource, options, receiverAddress);\n\n        if (!['BANDWIDTH', 'ENERGY'].includes(resource))\n            return callback('Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY\"');\n\n        if (!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if (!utils.isInteger(duration) || duration < 3)\n            return callback('Invalid duration provided, minimum of 3 days');\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if (!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const freezeBalance = await this.tronWeb.transactionBuilder.freezeBalance(amount, duration, resource, address, receiverAddress);\n            const signedTransaction = await this.sign(freezeBalance, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    /**\n     * Unfreeze TRX that has passed the minimum freeze duration.\n     * Unfreezing will remove bandwidth and TRON Power.\n     *\n     * @param resource - is the type, must be either \"ENERGY\" or \"BANDWIDTH\"\n     * @param options\n     * @param callback\n     */\n    async unfreezeBalance(resource = \"BANDWIDTH\", options = {}, receiverAddress = undefined, callback = false) {\n        if (utils.isFunction(receiverAddress)) {\n            callback = receiverAddress;\n            receiverAddress = undefined;\n        }\n\n        if (utils.isFunction(resource)) {\n            callback = resource;\n            resource = 'BANDWIDTH';\n        }\n\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (typeof options === 'string')\n            options = {privateKey: options};\n\n        if (!callback)\n            return this.injectPromise(this.unfreezeBalance, resource, options, receiverAddress);\n\n        if (!['BANDWIDTH', 'ENERGY'].includes(resource))\n            return callback('Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY\"');\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if (!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const unfreezeBalance = await this.tronWeb.transactionBuilder.unfreezeBalance(resource, address, receiverAddress);\n            const signedTransaction = await this.sign(unfreezeBalance, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    /**\n     * Modify account name\n     * Note: Username is allowed to edit only once.\n     *\n     * @param privateKey - Account private Key\n     * @param accountName - name of the account\n     * @param callback\n     *\n     * @return modified Transaction Object\n     */\n    async updateAccount(accountName = false, options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (typeof options === 'string')\n            options = {privateKey: options};\n\n        if (!callback) {\n            return this.injectPromise(this.updateAccount, accountName, options);\n        }\n\n        if (!utils.isString(accountName) || !accountName.length) {\n            return callback('Name must be a string');\n        }\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if (!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const updateAccount = await this.tronWeb.transactionBuilder.updateAccount(accountName, address);\n            const signedTransaction = await this.sign(updateAccount, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    signMessage(...args) {\n        return this.sign(...args);\n    }\n\n    sendAsset(...args) {\n        return this.sendToken(...args);\n    }\n\n    send(...args) {\n        return this.sendTransaction(...args);\n    }\n\n    sendTrx(...args) {\n        return this.sendTransaction(...args);\n    }\n\n    broadcast(...args) {\n        return this.sendRawTransaction(...args);\n    }\n\n    signTransaction(...args) {\n        return this.sign(...args);\n    }\n\n    /**\n     * Gets a network modification proposal by ID.\n     */\n    getProposal(proposalID = false, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getProposal, proposalID);\n\n        if (!utils.isInteger(proposalID) || proposalID < 0)\n            return callback('Invalid proposalID provided');\n\n        this.tronWeb.fullNode.request('wallet/getproposalbyid', {\n            id: parseInt(proposalID),\n        }, 'post').then(proposal => {\n            callback(null, proposal);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Lists all network modification proposals.\n     */\n    listProposals(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.listProposals);\n\n        this.tronWeb.fullNode.request('wallet/listproposals', {}, 'post').then(({proposals = []}) => {\n            callback(null, proposals);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Lists all parameters available for network modification proposals.\n     */\n    getChainParameters(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getChainParameters);\n\n        this.tronWeb.fullNode.request('wallet/getchainparameters', {}, 'post').then(({chainParameter = []}) => {\n            callback(null, chainParameter);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Get the account resources\n     */\n    getAccountResources(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getAccountResources, address);\n\n        if (!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        this.tronWeb.fullNode.request('wallet/getaccountresource', {\n            address: this.tronWeb.address.toHex(address),\n        }, 'post').then(resources => {\n            callback(null, resources);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Get the exchange ID.\n     */\n    getExchangeByID(exchangeID = false, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getExchangeByID, exchangeID);\n\n        if (!utils.isInteger(exchangeID) || exchangeID < 0)\n            return callback('Invalid exchangeID provided');\n\n        this.tronWeb.fullNode.request('wallet/getexchangebyid', {\n            id: exchangeID,\n        }, 'post').then(exchange => {\n            callback(null, exchange);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Lists the exchanges\n     */\n    listExchanges(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.listExchanges);\n\n        this.tronWeb.fullNode.request('wallet/listexchanges', {}, 'post').then(({exchanges = []}) => {\n            callback(null, exchanges);\n        }, 'post').catch(err => callback(err));\n    }\n\n    /**\n     * Lists all network modification proposals.\n     */\n    listExchangesPaginated(limit = 10, offset = 0, callback = false) {\n        if (utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;\n        }\n        if (utils.isFunction(limit)) {\n            callback = limit;\n            limit = 10;\n        }\n        if (!callback)\n            return this.injectPromise(this.listExchangesPaginated, limit, offset);\n\n        this.tronWeb.fullNode.request('wallet/getpaginatedexchangelist', {\n            limit,\n            offset\n        }, 'post').then(({exchanges = []}) => {\n            callback(null, exchanges);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Get info about thre node\n     */\n    getNodeInfo(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getNodeInfo);\n\n        this.tronWeb.fullNode.request('wallet/getnodeinfo', {}, 'post').then(info => {\n            callback(null, info);\n        }, 'post').catch(err => callback(err));\n    }\n\n\n    getTokenListByName(tokenID = false, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getTokenListByName, tokenID);\n\n        if (utils.isInteger(tokenID))\n            tokenID = tokenID.toString()\n\n        if (!utils.isString(tokenID) || !tokenID.length)\n            return callback('Invalid token ID provided');\n\n        this.tronWeb.fullNode.request('wallet/getassetissuelistbyname', {\n            value: this.tronWeb.fromUtf8(tokenID)\n        }, 'post').then(token => {\n            if (Array.isArray(token.assetIssue)) {\n                callback(null, token.assetIssue.map(t => this._parseToken(t)));\n            } else if (!token.name)\n                return callback('Token does not exist');\n\n            callback(null, this._parseToken(token));\n        }).catch(err => callback(err));\n    }\n\n    getTokenByID(tokenID = false, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getTokenByID, tokenID);\n\n        if (utils.isInteger(tokenID))\n            tokenID = tokenID.toString()\n\n        if (!utils.isString(tokenID) || !tokenID.length)\n            return callback('Invalid token ID provided');\n\n        this.tronWeb.fullNode.request('wallet/getassetissuebyid', {\n            value: tokenID\n        }, 'post').then(token => {\n            if (!token.name)\n                return callback('Token does not exist');\n\n            callback(null, this._parseToken(token));\n        }).catch(err => callback(err));\n    }\n\n    async getReward(address, options = {}, callback = false) {\n        options.confirmed = true;\n        return this._getReward(address, options, callback);\n    }\n\n    async getUnconfirmedReward(address, options = {}, callback = false) {\n        options.confirmed = false;\n        return this._getReward(address, options, callback);\n    }\n\n    async getBrokerage(address, options = {}, callback = false) {\n        options.confirmed = true;\n        return this._getBrokerage(address, options, callback);\n    }\n\n    async getUnconfirmedBrokerage(address, options = {}, callback = false) {\n        options.confirmed = false;\n        return this._getBrokerage(address, options, callback);\n    }\n\n    async _getReward(address = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(address)) {\n            options = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this._getReward, address, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'origin',\n                type: 'address',\n                value: address\n            }\n        ], callback))\n            return;\n\n        const data = {\n            address: toHex(address)\n        };\n\n        this.tronWeb[options.confirmed ? 'solidityNode' : 'fullNode'].request(`wallet${options.confirmed ? 'solidity' : ''}/getReward`, data, 'post')\n            .then((result = {}) => {\n\n                if (typeof result.reward === 'undefined')\n                    return callback('Not found.');\n\n                callback(null, result.reward);\n            }).catch(err => callback(err));\n    }\n\n\n    async _getBrokerage(address = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(address)) {\n            options = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this._getBrokerage, address, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'origin',\n                type: 'address',\n                value: address\n            }\n        ], callback))\n            return;\n\n        const data = {\n            address: toHex(address)\n        };\n\n        this.tronWeb[options.confirmed ? 'solidityNode' : 'fullNode'].request(`wallet${options.confirmed ? 'solidity' : ''}/getBrokerage`, data, 'post')\n            .then((result = {}) => {\n\n                if (typeof result.brokerage === 'undefined')\n                    return callback('Not found.');\n\n                callback(null, result.brokerage);\n            }).catch(err => callback(err));\n    }\n\n};\n","import utils from 'utils';\nimport {ADDRESS_PREFIX_REGEX} from 'utils/address';\nimport injectpromise from 'injectpromise';\n\nconst getFunctionSelector = abi => {\n    return abi.name + '(' + getParamTypes(abi.inputs || []).join(',') + ')';\n}\n\nconst getParamTypes = params => {\n    return params.map(({type}) => type);\n}\n\nconst decodeOutput = (abi, output) => {\n    const names = abi.map(({name}) => name).filter(name => !!name);\n    const types = abi.map(({type}) => type);\n\n    return utils.abi.decodeParams(names, types, output);\n};\n\nexport default class Method {\n    constructor(contract, abi) {\n        this.tronWeb = contract.tronWeb;\n        this.contract = contract;\n\n        this.abi = abi;\n        this.name = abi.name || (abi.name = abi.type);\n\n        this.inputs = abi.inputs || [];\n        this.outputs = abi.outputs || [];\n\n        this.functionSelector = getFunctionSelector(abi);\n        this.signature = this.tronWeb.sha3(this.functionSelector, false).slice(0, 8);\n        this.injectPromise = injectpromise(this);\n\n        this.defaultOptions = {\n            feeLimit: 1000000000,\n            callValue: 0,\n            userFeePercentage: 100,\n            shouldPollResponse: false // Only used for sign()\n        };\n    }\n\n    decodeInput(data) {\n        return decodeOutput(this.inputs, '0x' + data);\n    }\n\n    onMethod(...args) {\n        const types = getParamTypes(this.inputs);\n\n        args.forEach((arg, index) => {\n            if (types[index] == 'address')\n                args[index] = this.tronWeb.address.toHex(arg).replace(ADDRESS_PREFIX_REGEX, '0x')\n\n            if (types[index] == 'address[]') {\n                args[index] = args[index].map(address => {\n                    return this.tronWeb.address.toHex(address).replace(ADDRESS_PREFIX_REGEX, '0x')\n                })\n            }\n        });\n\n        return {\n            call: (...methodArgs) => this._call(types, args, ...methodArgs),\n            send: (...methodArgs) => this._send(types, args, ...methodArgs),\n            watch: (...methodArgs) => this._watch(...methodArgs)\n        }\n    }\n\n    async _call(types, args, options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!callback)\n            return this.injectPromise(this._call, types, args, options);\n\n        if (types.length !== args.length)\n            return callback('Invalid argument count provided');\n\n        if (!this.contract.address)\n            return callback('Smart contract is missing address');\n\n        if (!this.contract.deployed)\n            return callback('Calling smart contracts requires you to load the contract first');\n\n        const {stateMutability} = this.abi;\n\n        if (!['pure', 'view'].includes(stateMutability.toLowerCase()))\n            return callback(`Methods with state mutability \"${stateMutability}\" must use send()`);\n\n        options = {\n            ...this.defaultOptions,\n            from: this.tronWeb.defaultAddress.hex,\n            ...options,\n        };\n\n        const parameters = args.map((value, index) => ({\n            type: types[index],\n            value\n        }));\n\n        this.tronWeb.transactionBuilder.triggerSmartContract(\n            this.contract.address,\n            this.functionSelector,\n            options,\n            parameters,\n            options.from ? this.tronWeb.address.toHex(options.from) : false,\n            (err, transaction) => {\n                if (err)\n                    return callback(err);\n\n                if (!utils.hasProperty(transaction, 'constant_result'))\n                    return callback('Failed to execute');\n\n                try {\n\n                    const len = transaction.constant_result[0].length\n                    if (len === 0 || len % 64 === 8) {\n                        let msg = 'The call has been reverted or has thrown an error.'\n                        if (len !== 0) {\n                            msg += ' Error message: '\n                            let msg2 = ''\n                            let chunk = transaction.constant_result[0].substring(8)\n                            for (let i = 0; i < len - 8; i += 64) {\n                                msg2 += this.tronWeb.toUtf8(chunk.substring(i, i + 64))\n                            }\n                            msg += msg2.replace(/(\\u0000|\\u000b|\\f)+/g, ' ').replace(/ +/g, ' ').replace(/\\s+$/g, '');\n                        }\n                        return callback(msg)\n                    }\n\n                    let output = decodeOutput(this.outputs, '0x' + transaction.constant_result[0]);\n\n                    if (output.length === 1)\n                        output = output[0];\n\n                    return callback(null, output);\n                } catch (ex) {\n                    return callback(ex);\n                }\n            });\n    }\n\n    async _send(types, args, options = {}, privateKey = this.tronWeb.defaultPrivateKey, callback = false) {\n        if (utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n        }\n\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!callback)\n            return this.injectPromise(this._send, types, args, options, privateKey);\n\n        if (types.length !== args.length)\n            throw new Error('Invalid argument count provided');\n\n        if (!this.contract.address)\n            return callback('Smart contract is missing address');\n\n        if (!this.contract.deployed)\n            return callback('Calling smart contracts requires you to load the contract first');\n\n        const {stateMutability} = this.abi;\n\n        if (['pure', 'view'].includes(stateMutability.toLowerCase()))\n            return callback(`Methods with state mutability \"${stateMutability}\" must use call()`);\n\n        // If a function isn't payable, dont provide a callValue.\n        if (!['payable'].includes(stateMutability.toLowerCase()))\n            options.callValue = 0;\n\n        options = {\n            ...this.defaultOptions,\n            from: this.tronWeb.defaultAddress.hex,\n            ...options,\n        };\n\n        const parameters = args.map((value, index) => ({\n            type: types[index],\n            value\n        }));\n\n        try {\n            const address = privateKey ? this.tronWeb.address.fromPrivateKey(privateKey) : this.tronWeb.defaultAddress.base58;\n            const transaction = await this.tronWeb.transactionBuilder.triggerSmartContract(\n                this.contract.address,\n                this.functionSelector,\n                options,\n                parameters,\n                this.tronWeb.address.toHex(address)\n            );\n\n            if (!transaction.result || !transaction.result.result)\n                return callback('Unknown error: ' + JSON.stringify(transaction, null, 2));\n\n            // If privateKey is false, this won't be signed here. We assume sign functionality will be replaced.\n            const signedTransaction = await this.tronWeb.trx.sign(transaction.transaction, privateKey);\n\n            if (!signedTransaction.signature) {\n                if (!privateKey)\n                    return callback('Transaction was not signed properly');\n\n                return callback('Invalid private key provided');\n            }\n\n            const broadcast = await this.tronWeb.trx.sendRawTransaction(signedTransaction);\n\n            if (broadcast.code) {\n                const err = {\n                    error: broadcast.code,\n                    message: broadcast.code\n                };\n                if (broadcast.message)\n                    err.message = this.tronWeb.toUtf8(broadcast.message);\n                return callback(err)\n            }\n\n            if (!options.shouldPollResponse)\n                return callback(null, signedTransaction.txID);\n\n            const checkResult = async (index = 0) => {\n                if (index === 20) {\n                    return callback({\n                        error: 'Cannot find result in solidity node',\n                        transaction: signedTransaction\n                    });\n                }\n\n                const output = await this.tronWeb.trx.getTransactionInfo(signedTransaction.txID);\n\n                if (!Object.keys(output).length) {\n                    return setTimeout(() => {\n                        checkResult(index + 1);\n                    }, 3000);\n                }\n\n                if (output.result && output.result === 'FAILED') {\n                    return callback({\n                        error: this.tronWeb.toUtf8(output.resMessage),\n                        transaction: signedTransaction,\n                        output\n                    });\n                }\n\n                if (!utils.hasProperty(output, 'contractResult')) {\n                    return callback({\n                        error: 'Failed to execute: ' + JSON.stringify(output, null, 2),\n                        transaction: signedTransaction,\n                        output\n                    });\n                }\n\n                if (options.rawResponse)\n                    return callback(null, output);\n\n                let decoded = decodeOutput(this.outputs, '0x' + output.contractResult[0]);\n\n                if (decoded.length === 1)\n                    decoded = decoded[0];\n\n                if (options.keepTxID) {\n                    return callback(null, [signedTransaction.txID, decoded]);\n                }\n\n                return callback(null, decoded);\n            }\n\n            checkResult();\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async _watch(options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!utils.isFunction(callback))\n            throw new Error('Expected callback to be provided');\n\n        if (!this.contract.address)\n            return callback('Smart contract is missing address');\n\n        if (!this.abi.type || !/event/i.test(this.abi.type))\n            return callback('Invalid method type for event watching');\n\n        if (!this.tronWeb.eventServer)\n            return callback('No event server configured');\n\n        let listener = false;\n        let lastBlock = false;\n        let since = Date.now() - 1000;\n\n        const getEvents = async () => {\n            try {\n\n                const params = {\n                    since,\n                    eventName: this.name,\n                    sort: 'block_timestamp',\n                    blockNumber: 'latest',\n                    filters: options.filters\n                }\n                if (options.resourceNode) {\n                    if (/full/i.test(options.resourceNode))\n                        params.onlyUnconfirmed = true\n                    else\n                        params.onlyConfirmed = true\n                }\n\n                const events = await this.tronWeb.event.getEventsByContractAddress(this.contract.address, params);\n                const [latestEvent] = events.sort((a, b) => b.block - a.block);\n                const newEvents = events.filter((event, index) => {\n\n                    if (options.resourceNode && event.resourceNode &&\n                        options.resourceNode.toLowerCase() !== event.resourceNode.toLowerCase()) {\n                        return false\n                    }\n\n                    const duplicate = events.slice(0, index).some(priorEvent => (\n                        JSON.stringify(priorEvent) == JSON.stringify(event)\n                    ));\n\n                    if (duplicate)\n                        return false;\n\n                    if (!lastBlock)\n                        return true;\n\n                    return event.block > lastBlock;\n                });\n\n                if (latestEvent)\n                    lastBlock = latestEvent.block;\n\n                return newEvents;\n            } catch (ex) {\n                return Promise.reject(ex);\n            }\n\n        };\n\n        const bindListener = () => {\n            if (listener)\n                clearInterval(listener);\n\n            listener = setInterval(() => {\n                getEvents().then(events => events.forEach(event => {\n                    callback(null, utils.parseEvent(event, this.abi))\n                })).catch(err => callback(err));\n            }, 3000);\n        };\n\n        await getEvents();\n        bindListener();\n\n        return {\n            start: bindListener(),\n            stop: () => {\n                if (!listener)\n                    return;\n\n                clearInterval(listener);\n                listener = false;\n            }\n        }\n    }\n}\n","import TronWeb from 'index';\nimport utils from 'utils';\nimport Method from './method';\nimport injectpromise from 'injectpromise';\n\nexport default class Contract {\n    constructor(tronWeb = false, abi = [], address = false) {\n        if (!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n\n        this.tronWeb = tronWeb;\n        this.injectPromise = injectpromise(this);\n\n        this.address = address;\n        this.abi = abi;\n\n        this.eventListener = false;\n        this.bytecode = false;\n        this.deployed = false;\n        this.lastBlock = false;\n\n        this.methods = {};\n        this.methodInstances = {};\n        this.props = [];\n\n        if (this.tronWeb.isAddress(address))\n            this.deployed = true;\n        else this.address = false;\n\n        this.loadAbi(abi);\n    }\n\n    async _getEvents(options = {}) {\n        const events = await this.tronWeb.event.getEventsByContractAddress(this.address, options);\n        const [latestEvent] = events.sort((a, b) => b.block - a.block);\n        const newEvents = events.filter((event, index) => {\n\n            if (options.resourceNode && event.resourceNode &&\n                options.resourceNode.toLowerCase() !== event.resourceNode.toLowerCase()) {\n                return false\n            }\n\n            const duplicate = events.slice(0, index).some(priorEvent => (\n                JSON.stringify(priorEvent) == JSON.stringify(event)\n            ));\n\n            if (duplicate)\n                return false;\n\n            if (!this.lastBlock)\n                return true;\n\n            return event.block > this.lastBlock;\n        });\n\n        if (latestEvent)\n            this.lastBlock = latestEvent.block;\n\n        return newEvents;\n    }\n\n    async _startEventListener(options = {}, callback) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (this.eventListener)\n            clearInterval(this.eventListener);\n\n        if (!this.tronWeb.eventServer)\n            throw new Error('Event server is not configured');\n\n        if (!this.address)\n            throw new Error('Contract is not configured with an address');\n\n        this.eventCallback = callback;\n        await this._getEvents(options);\n\n        this.eventListener = setInterval(() => {\n            this._getEvents(options).then(newEvents => newEvents.forEach(event => {\n                this.eventCallback && this.eventCallback(event)\n            })).catch(err => {\n                console.error('Failed to get event list', err);\n            });\n        }, 3000);\n    }\n\n    _stopEventListener() {\n        if (!this.eventListener)\n            return;\n\n        clearInterval(this.eventListener);\n        this.eventListener = false;\n        this.eventCallback = false;\n    }\n\n    hasProperty(property) {\n        return this.hasOwnProperty(property) || this.__proto__.hasOwnProperty(property);\n    }\n\n    loadAbi(abi) {\n        this.abi = abi;\n        this.methods = {};\n\n        this.props.forEach(prop => delete this[prop]);\n\n        abi.forEach(func => {\n            // Don't build a method for constructor function. That's handled through contract create.\n            if (!func.type || /constructor/i.test(func.type))\n                return;\n\n            const method = new Method(this, func);\n            const methodCall = method.onMethod.bind(method);\n\n            const {\n                name,\n                functionSelector,\n                signature\n            } = method;\n\n            this.methods[name] = methodCall;\n            this.methods[functionSelector] = methodCall;\n            this.methods[signature] = methodCall;\n\n            this.methodInstances[name] = method;\n            this.methodInstances[functionSelector] = method;\n            this.methodInstances[signature] = method;\n\n            if (!this.hasProperty(name)) {\n                this[name] = methodCall;\n                this.props.push(name);\n            }\n\n            if (!this.hasProperty(functionSelector)) {\n                this[functionSelector] = methodCall;\n                this.props.push(functionSelector);\n            }\n\n            if (!this.hasProperty(signature)) {\n                this[signature] = methodCall;\n                this.props.push(signature);\n            }\n        });\n    }\n\n    decodeInput(data) {\n\n        const methodName = data.substring(0, 8);\n        const inputData = data.substring(8);\n\n        if (!this.methodInstances[methodName])\n            throw new Error('Contract method ' + methodName + \" not found\");\n\n        const methodInstance = this.methodInstances[methodName];\n\n        return {\n            name: methodInstance.name,\n            params: this.methodInstances[methodName].decodeInput(inputData),\n        }\n    }\n\n    async new(options, privateKey = this.tronWeb.defaultPrivateKey, callback = false) {\n        if (utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.new, options, privateKey);\n\n        try {\n            const address = this.tronWeb.address.fromPrivateKey(privateKey);\n            const transaction = await this.tronWeb.transactionBuilder.createSmartContract(options, address);\n            const signedTransaction = await this.tronWeb.trx.sign(transaction, privateKey);\n            const contract = await this.tronWeb.trx.sendRawTransaction(signedTransaction);\n\n            if (contract.code)\n                return callback({\n                    error: contract.code,\n                    message: this.tronWeb.toUtf8(contract.message)\n                })\n\n            await utils.sleep(3000);\n            return this.at(signedTransaction.contract_address, callback);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async at(contractAddress, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.at, contractAddress);\n\n        try {\n            const contract = await this.tronWeb.trx.getContract(contractAddress);\n\n            if (!contract.contract_address)\n                return callback('Unknown error: ' + JSON.stringify(contract, null, 2));\n\n            this.address = contract.contract_address;\n            this.bytecode = contract.bytecode;\n            this.deployed = true;\n\n            this.loadAbi(contract.abi ? contract.abi.entrys : []);\n\n            return callback(null, this);\n        } catch (ex) {\n            if (ex.toString().includes('does not exist'))\n                return callback('Contract has not been deployed on the network');\n\n            return callback(ex);\n        }\n    }\n\n    events(options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!utils.isFunction(callback))\n            throw new Error('Callback function expected');\n\n        const self = this;\n\n        return {\n            start(startCallback = false) {\n                if (!startCallback) {\n                    self._startEventListener(options, callback);\n                    return this;\n                }\n\n                self._startEventListener(options, callback).then(() => {\n                    startCallback();\n                }).catch(err => {\n                    startCallback(err)\n                });\n\n                return this;\n            },\n            stop() {\n                self._stopEventListener();\n            }\n        };\n    }\n}\n","import TronWeb from 'index';\nimport utils from 'utils';\nimport semver from 'semver';\n\nexport default class Plugin {\n\n    constructor(tronWeb = false, options = {}) {\n        if (!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n        this.tronWeb = tronWeb;\n        this.pluginNoOverride = ['register'];\n        this.disablePlugins = options.disablePlugins;\n    }\n\n    register(Plugin, options) {\n        let pluginInterface = {\n            requires: '0.0.0',\n            components: {}\n        }\n        let result = {\n            libs: [],\n            plugged: [],\n            skipped: []\n        }\n        if (this.disablePlugins) {\n            result.error = 'This instance of TronWeb has plugins disabled.'\n            return result;\n        }\n        const plugin = new Plugin(this.tronWeb)\n        if (utils.isFunction(plugin.pluginInterface)) {\n            pluginInterface = plugin.pluginInterface(options)\n        }\n        if (semver.satisfies(TronWeb.version, pluginInterface.requires)) {\n            if (pluginInterface.fullClass) {\n                // plug the entire class at the same level of tronWeb.trx\n                let className = plugin.constructor.name\n                let classInstanceName = className.substring(0, 1).toLowerCase() + className.substring(1)\n                if (className !== classInstanceName) {\n                    TronWeb[className] = Plugin\n                    this.tronWeb[classInstanceName] = plugin\n                    result.libs.push(className)\n                }\n            } else {\n                // plug methods into a class, like trx\n                for (let component in pluginInterface.components) {\n                    if (!this.tronWeb.hasOwnProperty(component)) {\n                        continue\n                    }\n                    let methods = pluginInterface.components[component]\n                    let pluginNoOverride = this.tronWeb[component].pluginNoOverride || []\n                    for (let method in methods) {\n                        if (method === 'constructor' || (this.tronWeb[component][method] &&\n                            (pluginNoOverride.includes(method) // blacklisted methods\n                                || /^_/.test(method)) // private methods\n                        )) {\n                            result.skipped.push(method)\n                            continue\n                        }\n                        this.tronWeb[component][method] = methods[method].bind(this.tronWeb[component])\n                        result.plugged.push(method)\n                    }\n                }\n            }\n        } else {\n            throw new Error('The plugin is not compatible with this version of TronWeb')\n        }\n        return result\n    }\n}\n\n","import TronWeb from 'index';\nimport utils from 'utils';\nimport providers from \"./providers\";\nimport querystring from \"querystring\";\nimport injectpromise from 'injectpromise';\n\nexport default class Event {\n\n    constructor(tronWeb = false) {\n        if (!tronWeb || !(tronWeb instanceof TronWeb))\n            throw new Error('Expected instance of TronWeb');\n        this.tronWeb = tronWeb;\n        this.injectPromise = injectpromise(this);\n    }\n\n    setServer(eventServer = false, healthcheck = 'healthcheck') {\n        if (!eventServer)\n            return this.tronWeb.eventServer = false;\n\n        if (utils.isString(eventServer))\n            eventServer = new providers.HttpProvider(eventServer);\n\n        if (!this.tronWeb.isValidProvider(eventServer))\n            throw new Error('Invalid event server provided');\n\n        this.tronWeb.eventServer = eventServer;\n        this.tronWeb.eventServer.isConnected = () => this.tronWeb.eventServer.request(healthcheck).then(() => true).catch(() => false);\n    }\n\n    getEventsByContractAddress(contractAddress = false, options = {}, callback = false) {\n\n        let {\n            sinceTimestamp,\n            since,\n            fromTimestamp,\n            eventName,\n            blockNumber,\n            size,\n            page,\n            onlyConfirmed,\n            onlyUnconfirmed,\n            previousLastEventFingerprint,\n            previousFingerprint,\n            fingerprint,\n            rawResponse,\n            sort,\n            filters\n        } = Object.assign({\n            sinceTimestamp: 0,\n            eventName: false,\n            blockNumber: false,\n            size: 20,\n            page: 1\n        }, options)\n\n        if (!callback)\n            return this.injectPromise(this.getEventsByContractAddress, contractAddress, options);\n\n        fromTimestamp = fromTimestamp || sinceTimestamp || since;\n\n        if (!this.tronWeb.eventServer)\n            return callback('No event server configured');\n\n        const routeParams = [];\n\n        if (!this.tronWeb.isAddress(contractAddress))\n            return callback('Invalid contract address provided');\n\n        if (eventName && !contractAddress)\n            return callback('Usage of event name filtering requires a contract address');\n\n        if (typeof fromTimestamp !== 'undefined' && !utils.isInteger(fromTimestamp))\n            return callback('Invalid fromTimestamp provided');\n\n        if (!utils.isInteger(size))\n            return callback('Invalid size provided');\n\n        if (size > 200) {\n            console.warn('Defaulting to maximum accepted size: 200');\n            size = 200;\n        }\n\n        if (!utils.isInteger(page))\n            return callback('Invalid page provided');\n\n        if (blockNumber && !eventName)\n            return callback('Usage of block number filtering requires an event name');\n\n        if (contractAddress)\n            routeParams.push(this.tronWeb.address.fromHex(contractAddress));\n\n        if (eventName)\n            routeParams.push(eventName);\n\n        if (blockNumber)\n            routeParams.push(blockNumber);\n\n        const qs = {\n            size,\n            page\n        }\n\n        if (typeof filters === 'object' && Object.keys(filters).length > 0) {\n            qs.filters = JSON.stringify(filters);\n        }\n\n        if (fromTimestamp) {\n            qs.fromTimestamp = qs.since = fromTimestamp;\n        }\n\n        if (onlyConfirmed)\n            qs.onlyConfirmed = onlyConfirmed\n\n        if (onlyUnconfirmed && !onlyConfirmed)\n            qs.onlyUnconfirmed = onlyUnconfirmed\n\n        if (sort)\n            qs.sort = sort\n\n        fingerprint = fingerprint || previousFingerprint || previousLastEventFingerprint\n        if (fingerprint)\n            qs.fingerprint = fingerprint\n\n        return this.tronWeb.eventServer.request(`event/contract/${routeParams.join('/')}?${querystring.stringify(qs)}`).then((data = false) => {\n            if (!data)\n                return callback('Unknown error occurred');\n\n            if (!utils.isArray(data))\n                return callback(data);\n\n            return callback(null,\n                rawResponse === true ? data : data.map(event => utils.mapEvent(event))\n            );\n        }).catch(err => callback((err.response && err.response.data) || err));\n    }\n\n\n    getEventsByTransactionID(transactionID = false, options = {}, callback = false) {\n\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getEventsByTransactionID, transactionID, options);\n\n        if (!this.tronWeb.eventServer)\n            return callback('No event server configured');\n\n        return this.tronWeb.eventServer.request(`event/transaction/${transactionID}`).then((data = false) => {\n            if (!data)\n                return callback('Unknown error occurred');\n\n            if (!utils.isArray(data))\n                return callback(data);\n\n            return callback(null,\n                options.rawResponse === true ? data : data.map(event => utils.mapEvent(event))\n            );\n        }).catch(err => callback((err.response && err.response.data) || err));\n    }\n\n}\n\n","import providers from 'lib/providers';\nimport utils from 'utils';\nimport BigNumber from 'bignumber.js';\nimport EventEmitter from 'eventemitter3';\nimport {version} from '../package.json';\nimport semver from 'semver';\nimport injectpromise from 'injectpromise';\n\nimport TransactionBuilder from 'lib/transactionBuilder';\nimport Trx from 'lib/trx';\nimport Contract from 'lib/contract';\nimport Plugin from 'lib/plugin';\nimport Event from 'lib/event';\nimport {keccak256} from 'utils/ethersUtils';\nimport {ADDRESS_PREFIX} from 'utils/address';\n\nconst DEFAULT_VERSION = '3.5.0';\n\nexport default class TronWeb extends EventEmitter {\n    static providers = providers;\n    static BigNumber = BigNumber;\n    static TransactionBuilder = TransactionBuilder;\n    static Trx = Trx;\n    static Contract = Contract;\n    static Plugin = Plugin;\n    static Event = Event;\n    static version = version;\n    static utils = utils;\n\n    constructor(options = false,\n                // for retro-compatibility:\n                solidityNode = false, eventServer = false, privateKey = false) {\n        super();\n\n        let fullNode;\n        if (typeof options === 'object' && (options.fullNode || options.fullHost)) {\n            fullNode = options.fullNode || options.fullHost;\n            solidityNode = options.solidityNode || options.fullHost;\n            eventServer = options.eventServer || options.fullHost;\n            privateKey = options.privateKey;\n        } else {\n            fullNode = options;\n        }\n\n        if (utils.isString(fullNode))\n            fullNode = new providers.HttpProvider(fullNode);\n\n        if (utils.isString(solidityNode))\n            solidityNode = new providers.HttpProvider(solidityNode);\n\n        if (utils.isString(eventServer))\n            eventServer = new providers.HttpProvider(eventServer);\n\n        this.event = new Event(this);\n        this.transactionBuilder = new TransactionBuilder(this);\n        this.trx = new Trx(this);\n        this.plugin = new Plugin(this, options);\n        this.utils = utils;\n\n        this.setFullNode(fullNode);\n        this.setSolidityNode(solidityNode);\n        this.setEventServer(eventServer);\n\n        this.providers = providers;\n        this.BigNumber = BigNumber;\n\n        this.defaultBlock = false;\n        this.defaultPrivateKey = false;\n        this.defaultAddress = {\n            hex: false,\n            base58: false\n        };\n\n        [\n            'sha3', 'toHex', 'toUtf8', 'fromUtf8',\n            'toAscii', 'fromAscii', 'toDecimal', 'fromDecimal',\n            'toSun', 'fromSun', 'toBigNumber', 'isAddress',\n            'createAccount', 'address', 'version'\n        ].forEach(key => {\n            this[key] = TronWeb[key];\n        });\n\n        if (privateKey)\n            this.setPrivateKey(privateKey);\n\n        this.fullnodeVersion = DEFAULT_VERSION;\n        this.injectPromise = injectpromise(this);\n    }\n\n    async getFullnodeVersion() {\n        try {\n            const nodeInfo = await this.trx.getNodeInfo()\n            this.fullnodeVersion = nodeInfo.configNodeInfo.codeVersion\n            if (this.fullnodeVersion.split('.').length === 2) {\n                this.fullnodeVersion += '.0';\n            }\n        } catch (err) {\n            this.fullnodeVersion = DEFAULT_VERSION;\n        }\n    }\n\n    setDefaultBlock(blockID = false) {\n        if ([false, 'latest', 'earliest', 0].includes(blockID)) {\n            return this.defaultBlock = blockID;\n        }\n\n        if (!utils.isInteger(blockID) || !blockID)\n            throw new Error('Invalid block ID provided');\n\n        this.defaultBlock = Math.abs(blockID);\n    }\n\n    setPrivateKey(privateKey) {\n        try {\n            this.setAddress(\n                this.address.fromPrivateKey(privateKey)\n            );\n        } catch {\n            throw new Error('Invalid private key provided');\n        }\n\n        this.defaultPrivateKey = privateKey;\n        this.emit('privateKeyChanged', privateKey);\n    }\n\n    setAddress(address) {\n        if (!this.isAddress(address))\n            throw new Error('Invalid address provided');\n\n        const hex = this.address.toHex(address);\n        const base58 = this.address.fromHex(address);\n\n        if (this.defaultPrivateKey && this.address.fromPrivateKey(this.defaultPrivateKey) !== base58)\n            this.defaultPrivateKey = false;\n\n        this.defaultAddress = {\n            hex,\n            base58\n        };\n\n        this.emit('addressChanged', {hex, base58});\n    }\n\n    fullnodeSatisfies(version) {\n        return semver.satisfies(this.fullnodeVersion, version);\n    }\n\n    isValidProvider(provider) {\n        return Object.values(providers).some(knownProvider => provider instanceof knownProvider);\n    }\n\n    setFullNode(fullNode) {\n        if (utils.isString(fullNode))\n            fullNode = new providers.HttpProvider(fullNode);\n\n        if (!this.isValidProvider(fullNode))\n            throw new Error('Invalid full node provided');\n\n        this.fullNode = fullNode;\n        this.fullNode.setStatusPage('wallet/getnowblock');\n\n        this.getFullnodeVersion();\n    }\n\n    setSolidityNode(solidityNode) {\n        if (utils.isString(solidityNode))\n            solidityNode = new providers.HttpProvider(solidityNode);\n\n        if (!this.isValidProvider(solidityNode))\n            throw new Error('Invalid solidity node provided');\n\n        this.solidityNode = solidityNode;\n        this.solidityNode.setStatusPage('walletsolidity/getnowblock');\n    }\n\n    setEventServer(...params) {\n        this.event.setServer(...params)\n    }\n\n    currentProviders() {\n        return {\n            fullNode: this.fullNode,\n            solidityNode: this.solidityNode,\n            eventServer: this.eventServer\n        };\n    }\n\n    currentProvider() {\n        return this.currentProviders();\n    }\n\n\n    getEventResult(...params) {\n\n        if (typeof params[1] !== 'object') {\n            params[1] = {\n                sinceTimestamp: params[1] || 0,\n                eventName: params[2] || false,\n                blockNumber: params[3] || false,\n                size: params[4] || 20,\n                page: params[5] || 1\n            }\n            params.splice(2, 4)\n\n            // callback:\n            if (!utils.isFunction(params[2])) {\n\n                if (utils.isFunction(params[1].page)) {\n                    params[2] = params[1].page;\n                    params[1].page = 1;\n                } else if (utils.isFunction(params[1].size)) {\n                    params[2] = params[1].size;\n                    params[1].size = 20;\n                    params[1].page = 1;\n                }\n            }\n        }\n\n        return this.event.getEventsByContractAddress(...params);\n    }\n\n    getEventByTransactionID(...params) {\n        return this.event.getEventsByTransactionID(...params)\n    }\n\n    contract(abi = [], address = false) {\n        return new Contract(this, abi, address);\n    }\n\n    static get address() {\n        return {\n            fromHex(address) {\n                if (!utils.isHex(address))\n                    return address;\n\n                return utils.crypto.getBase58CheckAddress(\n                    utils.code.hexStr2byteArray(address.replace(/^0x/, ADDRESS_PREFIX))\n                );\n            },\n            toHex(address) {\n                if (utils.isHex(address))\n                    return address.toLowerCase().replace(/^0x/, ADDRESS_PREFIX);\n\n                return utils.code.byteArray2hexStr(\n                    utils.crypto.decodeBase58Address(address)\n                ).toLowerCase();\n            },\n            fromPrivateKey(privateKey) {\n                try {\n                    return utils.crypto.pkToAddress(privateKey);\n                } catch {\n                    return false;\n                }\n            }\n        }\n    }\n\n    static sha3(string, prefix = true) {\n        return (prefix ? '0x' : '') + keccak256(Buffer.from(string, 'utf-8')).toString().substring(2);\n    }\n\n    static toHex(val) {\n        if (utils.isBoolean(val))\n            return TronWeb.fromDecimal(+val);\n\n        if (utils.isBigNumber(val))\n            return TronWeb.fromDecimal(val);\n\n        if (typeof val === 'object')\n            return TronWeb.fromUtf8(JSON.stringify(val));\n\n        if (utils.isString(val)) {\n            if (/^(-|)0x/.test(val))\n                return val;\n\n            if (!isFinite(val))\n                return TronWeb.fromUtf8(val);\n        }\n\n        let result = TronWeb.fromDecimal(val);\n        if (result === '0xNaN') {\n            throw new Error('The passed value is not convertible to a hex string');\n        } else {\n            return result;\n        }\n    }\n\n    static toUtf8(hex) {\n        if (utils.isHex(hex)) {\n            hex = hex.replace(/^0x/, '');\n            return Buffer.from(hex, 'hex').toString('utf8');\n        } else {\n            throw new Error('The passed value is not a valid hex string');\n        }\n    }\n\n    static fromUtf8(string) {\n        if (!utils.isString(string)) {\n            throw new Error('The passed value is not a valid utf-8 string')\n        }\n        return '0x' + Buffer.from(string, 'utf8').toString('hex');\n    }\n\n    static toAscii(hex) {\n        if (utils.isHex(hex)) {\n            let str = \"\";\n            let i = 0, l = hex.length;\n            if (hex.substring(0, 2) === '0x') {\n                i = 2;\n            }\n            for (; i < l; i += 2) {\n                let code = parseInt(hex.substr(i, 2), 16);\n                str += String.fromCharCode(code);\n            }\n            return str;\n        } else {\n            throw new Error('The passed value is not a valid hex string');\n        }\n    }\n\n    static fromAscii(string, padding) {\n        if (!utils.isString(string)) {\n            throw new Error('The passed value is not a valid utf-8 string')\n        }\n        return '0x' + Buffer.from(string, 'ascii').toString('hex').padEnd(padding, '0');\n    }\n\n\n    static toDecimal(value) {\n        return TronWeb.toBigNumber(value).toNumber();\n    }\n\n    static fromDecimal(value) {\n        const number = TronWeb.toBigNumber(value);\n        const result = number.toString(16);\n\n        return number.isLessThan(0) ? '-0x' + result.substr(1) : '0x' + result;\n    }\n\n    static fromSun(sun) {\n        const trx = TronWeb.toBigNumber(sun).div(1_000_000);\n        return utils.isBigNumber(sun) ? trx : trx.toString(10);\n    }\n\n    static toSun(trx) {\n        const sun = TronWeb.toBigNumber(trx).times(1_000_000);\n        return utils.isBigNumber(trx) ? sun : sun.toString(10);\n    }\n\n    static toBigNumber(amount = 0) {\n        if (utils.isBigNumber(amount))\n            return amount;\n\n        if (utils.isString(amount) && /^(-|)0x/.test(amount))\n            return new BigNumber(amount.replace('0x', ''), 16);\n\n        return new BigNumber(amount.toString(10), 10);\n    }\n\n    static isAddress(address = false) {\n        if (!utils.isString(address))\n            return false;\n\n        // Convert HEX to Base58\n        if (address.length === 42) {\n            try {\n                return TronWeb.isAddress(\n                    utils.crypto.getBase58CheckAddress(\n                        utils.code.hexStr2byteArray(address) // it throws an error if the address starts with 0x\n                    )\n                );\n            } catch (err) {\n                return false;\n            }\n        }\n        try {\n            return utils.crypto.isAddressValid(address);\n        } catch (err) {\n            return false;\n        }\n    }\n\n    static async createAccount() {\n        const account = utils.accounts.generateAccount();\n\n        return account;\n    }\n\n    async isConnected(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.isConnected);\n\n        return callback(null, {\n            fullNode: await this.fullNode.isConnected(),\n            solidityNode: await this.solidityNode.isConnected(),\n            eventServer: this.eventServer && await this.eventServer.isConnected()\n        });\n    }\n};\n"],"sourceRoot":""}